security:
#    enable_authenticator_manager: true
#    providers:
#        jwt_user_provider:
#            id: Viabo\shared\infrastructure\symfony\security\JwtUserProvider
#    password_hashers:
#        Viabo\shared\infrastructure\symfony\security\JwtUser: 'auto'
#    firewalls:
#        dev:
#            pattern: ^/(_(profiler|wdt)|css|images|js)/
#            security: false
#        login:
#            pattern: ^/api/login
#            stateless: true
#            provider: jwt_user_provider
#            jwt:
#                authenticator: viabo.user_authenticator
#            json_login:
#                check_path: /api/login
#                success_handler: lexik_jwt_authentication.handler.authentication_success
#                failure_handler: lexik_jwt_authentication.handler.authentication_failure
#        main:
#            stateless: true
#            jwt: ~
#
#    access_control:
##        - { path: ^/api/security/legalRepresentative/new, roles: PUBLIC_ACCESS  }
##        - { path: ^/api/register/commerce/legalRepresentative/find, roles: PUBLIC_ACCESS  }
#        - { path: ^/api/login, roles: PUBLIC_ACCESS }
#        - { path: ^/api/, roles: IS_AUTHENTICATED_FULLY }

# Temporal
    enable_authenticator_manager: true
    providers:
        users_in_memory: { memory: null }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory

    access_control:
    # - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
