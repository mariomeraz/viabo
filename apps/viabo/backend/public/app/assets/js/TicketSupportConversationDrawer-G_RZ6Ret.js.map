{"version":3,"mappings":"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","names":["useFindTicketConversation","tickedId","options","customError","setCustomError","useState","setCanCloseTicket","useTicketSupportListStore","state","query","useInfiniteQuery","TICKETS_SUPPORT_LIST_KEYS","pageParam","data","getSupportTicketConversation","lastPage","useEffect","errorMessage","getErrorAPI","toast","getNotificationTypeByErrorCode","useFinishSupportTicket","client","useQueryClient","finishTicket","useMutation","finishSupportTicket","formData","onSuccess","onError","mutationOptions","isFunction","error","errorFormatted","TicketConversationLayout","Lodable","lazy","TicketSupportConversationDrawer","openTicketConversation","setOpenTicketConversation","ticket","setSupportTicketDetails","canCloseTicket","queryTicketConversation","id","enabled","mutate","isLoading","isFinishingTicket","isError","refetch","fetchNextPage","handleClose","handleFinishSupportTicket","ticketId","jsxs","RightPanel","Stack","jsx","Typography","status","LoadingButton","DoneAll","sm","lg","xl","Scrollbar","sx","flexGrow","height","ErrorRequestPage"],"sources":["../../../../../frontend/src/app/support/ticket-support-list/hooks/useFindTicketConversation.js","../../../../../frontend/src/app/support/ticket-support-list/hooks/useFinishSupportTicket.js","../../../../../frontend/src/app/support/ticket-support-list/components/conversation/TicketSupportConversationDrawer.jsx"],"sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nimport { useInfiniteQuery } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { TICKETS_SUPPORT_LIST_KEYS } from '../adapters'\r\nimport { getSupportTicketConversation } from '../services'\r\nimport { useTicketSupportListStore } from '../store'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindTicketConversation = (tickedId, options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n  const setCanCloseTicket = useTicketSupportListStore(state => state.setCanCloseTicket)\r\n\r\n  const query = useInfiniteQuery({\r\n    queryKey: [TICKETS_SUPPORT_LIST_KEYS.TICKET_CONVERSATION, tickedId],\r\n    queryFn: async ({ pageParam = 1 }) => {\r\n      const data = await getSupportTicketConversation(tickedId, pageParam)\r\n      setCanCloseTicket(!!data?.canCloseTicket)\r\n      return data\r\n    },\r\n    getNextPageParam: lastPage => lastPage.next,\r\n    refetchOnMount: 'always',\r\n    staleTime: 60 * 5000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener la conversación del ticket. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(query.error)\r\n      })\r\n      setCanCloseTicket(false)\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { TICKETS_SUPPORT_LIST_KEYS } from '../adapters'\r\nimport { finishSupportTicket } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\nimport { isFunction } from '@/shared/utils'\r\n\r\nexport const useFinishSupportTicket = (options = {}) => {\r\n  const client = useQueryClient()\r\n  const finishTicket = useMutation({\r\n    mutationFn: finishSupportTicket,\r\n    ...options\r\n  })\r\n  const mutate = async (formData, options) => {\r\n    const { onSuccess, onError, ...mutationOptions } = options\r\n\r\n    try {\r\n      await toast.promise(finishTicket.mutateAsync(formData, mutationOptions), {\r\n        pending: 'Finalizando Ticket...',\r\n        success: {\r\n          render({ data }) {\r\n            client.invalidateQueries([TICKETS_SUPPORT_LIST_KEYS.ASSIGNED_LIST])\r\n            client.invalidateQueries([TICKETS_SUPPORT_LIST_KEYS.GENERATED_LIST])\r\n            isFunction(onSuccess) && onSuccess(data)\r\n            return 'Se finalizo el ticket con éxito'\r\n          }\r\n        }\r\n      })\r\n    } catch (error) {\r\n      const errorFormatted = getErrorAPI(\r\n        error,\r\n        `No se puede realizar esta operación en este momento. Intente nuevamente o reporte a sistemas`\r\n      )\r\n      isFunction(onError) && onError(errorFormatted)\r\n      toast.error(errorFormatted, {\r\n        type: getNotificationTypeByErrorCode(error)\r\n      })\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...finishTicket,\r\n    mutate\r\n  }\r\n}\r\n","import { lazy, useEffect } from 'react'\r\n\r\nimport { DoneAll } from '@mui/icons-material'\r\nimport { LoadingButton } from '@mui/lab'\r\nimport { Stack, Typography } from '@mui/material'\r\n\r\nimport { useFindTicketConversation, useFinishSupportTicket } from '../../hooks'\r\nimport { useTicketSupportListStore } from '../../store'\r\n\r\nimport { RightPanel } from '@/app/shared/components'\r\nimport { Lodable } from '@/shared/components/lodables'\r\nimport { ErrorRequestPage } from '@/shared/components/notifications'\r\nimport { Scrollbar } from '@/shared/components/scroll'\r\n\r\nconst TicketConversationLayout = Lodable(lazy(() => import('./TicketConversationLayout')))\r\n\r\nconst TicketSupportConversationDrawer = () => {\r\n  const { openTicketConversation, setOpenTicketConversation, ticket, setSupportTicketDetails, canCloseTicket } =\r\n    useTicketSupportListStore()\r\n\r\n  const queryTicketConversation = useFindTicketConversation(ticket?.id, { enabled: !!ticket?.id })\r\n\r\n  const { mutate: finishTicket, isLoading: isFinishingTicket } = useFinishSupportTicket()\r\n\r\n  const { isLoading, error, isError, refetch, data, fetchNextPage } = queryTicketConversation\r\n\r\n  useEffect(() => {\r\n    if (openTicketConversation && ticket?.id) {\r\n      refetch()\r\n    }\r\n  }, [openTicketConversation, ticket?.id])\r\n\r\n  const handleClose = () => {\r\n    setOpenTicketConversation(false)\r\n    setSupportTicketDetails(null)\r\n  }\r\n\r\n  const handleFinishSupportTicket = () => {\r\n    finishTicket(\r\n      { ticketId: ticket?.id },\r\n      {\r\n        onSuccess: () => {\r\n          handleClose()\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  return (\r\n    <RightPanel\r\n      open={openTicketConversation}\r\n      handleClose={handleClose}\r\n      titleElement={\r\n        <Stack justifyContent={'space-between'} flex={1} flexDirection={'column'} gap={1}>\r\n          <Stack>\r\n            <Typography variant={'h6'}>{`Ticket #${ticket?.id}`}</Typography>\r\n          </Stack>\r\n          {ticket && data && canCloseTicket && ticket?.status?.id !== '3' && (\r\n            <Stack maxWidth={'30%'}>\r\n              <LoadingButton\r\n                endIcon={<DoneAll />}\r\n                variant=\"contained\"\r\n                onClick={handleFinishSupportTicket}\r\n                loading={isLoading || isFinishingTicket}\r\n                color=\"success\"\r\n                // sx={{ typography: 'subtitle1' }}\r\n              >\r\n                Concluir\r\n              </LoadingButton>\r\n            </Stack>\r\n          )}\r\n        </Stack>\r\n      }\r\n      width={{ sm: '100%', lg: '50%', xl: '40%' }}\r\n    >\r\n      {isError && !isLoading && (\r\n        <Scrollbar containerProps={{ sx: { flexGrow: 0, height: 'auto' } }}>\r\n          <Stack spacing={3} p={3}>\r\n            <ErrorRequestPage\r\n              errorMessage={error}\r\n              titleMessage={'Conversación del Ticket'}\r\n              handleButton={() => refetch()}\r\n            />\r\n          </Stack>\r\n        </Scrollbar>\r\n      )}\r\n\r\n      {!isError && openTicketConversation && (\r\n        <TicketConversationLayout queryTicketConversation={queryTicketConversation} ticket={ticket} />\r\n      )}\r\n    </RightPanel>\r\n  )\r\n}\r\n\r\nexport default TicketSupportConversationDrawer\r\n"],"file":"assets/js/TicketSupportConversationDrawer-G_RZ6Ret.js"}