{"version":3,"mappings":"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","names":["AddMessageToTicketAdapter","ticketId","conversation","user","message","attachments","formData","file","createDate","crypto","array","optimisticMessage","getNameAvatar","useAddNewMessageToTicket","options","client","useQueryClient","setMessage","useMutation","addMessageToSupportTicketConversation","queryKey","TICKETS_SUPPORT_LIST_KEYS","previousMessages","old","newData","comments","_a","_b","newPages","chunk","page","err","context","data","onSuccess","onError","mutationOptions","toast","isFunction","error","errorFormatted","getErrorAPI","getNotificationTypeByErrorCode","TicketMessages","Lodable","lazy","TicketAddAttachmentFiles","TicketMessageInput","TicketConversationLayout","ticket","queryTicketConversation","mutate","isLoading","isLoadingNewMessage","useUser","scroll","setScroll","useState","RegisterSchema","Yup","shape","required","formik","useFormik","validateOnChange","enableReinitialize","initialValues","validationSchema","onSubmit","values","setSubmitting","resetForm","id","handleSubmit","isSubmitting","setFieldValue","validateForm","handleFileChange","event","files","Array","from","target","handleRemoveFile","selectedFile","filter","handleAddMessage","e","preventDefault","validate","Object","keys","length","scrollTo","warn","useMemo","isFetching","LinearProgress","jsx","Stack","overflow","jsxs","Divider","status","propTypes","PropTypes","any","string"],"sources":["../../../../../frontend/src/app/support/ticket-support-list/adapters/add-message-to-ticket-adapter.js","../../../../../frontend/src/app/support/ticket-support-list/hooks/useAddNewMessageToTicket.js","../../../../../frontend/src/app/support/ticket-support-list/components/conversation/TicketConversationLayout.jsx"],"sourcesContent":["import { getNameAvatar } from '@/theme/utils'\r\n\r\nexport const AddMessageToTicketAdapter = (ticketId, conversation, user) => {\r\n  const { message, attachments } = conversation\r\n  const formData = new FormData()\r\n\r\n  formData.append('message', message)\r\n  formData.append('ticketId', ticketId)\r\n\r\n  attachments?.forEach(file => {\r\n    formData.append('files[]', file)\r\n  })\r\n  const createDate = new Date().toLocaleString()\r\n  const crypto = window.crypto || window.msCrypto\r\n  const array = new Uint32Array(1)\r\n\r\n  const optimisticMessage = {\r\n    id: crypto.getRandomValues(array)[0],\r\n    name: user?.name,\r\n    initials: getNameAvatar(user?.name || ''),\r\n    message,\r\n    createDate: {\r\n      fToNow: 'justo ahora',\r\n      original: createDate\r\n    },\r\n    my: true,\r\n    attachment: attachments || [],\r\n    avatar: message?.photo && message?.photo !== '' ? message?.photo : '/',\r\n    isSent: false\r\n  }\r\n\r\n  return {\r\n    data: formData,\r\n    ticketId,\r\n    optimistic: optimisticMessage\r\n  }\r\n}\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { chunk } from 'lodash'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { TICKETS_SUPPORT_LIST_KEYS } from '../adapters'\r\nimport { addMessageToSupportTicketConversation } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\nimport { isFunction } from '@/shared/utils'\r\n\r\nexport const useAddNewMessageToTicket = (options = {}) => {\r\n  const client = useQueryClient()\r\n  const setMessage = useMutation({\r\n    mutationFn: addMessageToSupportTicketConversation,\r\n    onMutate: async message => {\r\n      const queryKey = [TICKETS_SUPPORT_LIST_KEYS.TICKET_CONVERSATION, message?.ticketId]\r\n      // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\r\n      await client.cancelQueries({ queryKey })\r\n\r\n      // Snapshot the previous value\r\n      const previousMessages = client.getQueryData(queryKey)\r\n\r\n      // Optimistically update to the new value\r\n      client.setQueryData(queryKey, old => {\r\n        const newData = old.pages.flat().map(comments => ({\r\n          ...comments,\r\n          results: {\r\n            participants: comments?.results?.participants || [],\r\n            messages: [message?.optimistic, ...comments?.results?.messages]\r\n          }\r\n        }))\r\n        const newPages = chunk(newData, 10)\r\n\r\n        const newPagination = {\r\n          pageParams: [undefined, ...newPages.slice(0, -1).map(page => page.at(-1).createdAt)],\r\n          pages: newPages.flat()\r\n        }\r\n\r\n        return newPagination\r\n      })\r\n\r\n      // Return a context object with the snapshotted value\r\n      return { previousMessages }\r\n    },\r\n    // eslint-disable-next-line n/handle-callback-err\r\n    onError: (err, message, context) => {\r\n      client.setQueryData([TICKETS_SUPPORT_LIST_KEYS.TICKET_CONVERSATION, message?.ticketId], context.previousMessages)\r\n    },\r\n\r\n    // eslint-disable-next-line n/handle-callback-err\r\n    onSettled: (data, err, message, context) => {\r\n      client.invalidateQueries({ queryKey: [TICKETS_SUPPORT_LIST_KEYS.TICKET_CONVERSATION, message?.ticketId] })\r\n    },\r\n    ...options\r\n  })\r\n  const mutate = async (formData, options) => {\r\n    const { onSuccess, onError, ...mutationOptions } = options\r\n\r\n    try {\r\n      await toast.promise(setMessage.mutateAsync(formData, mutationOptions), {\r\n        pending: 'Agregando Mensaje al Ticket...',\r\n        success: {\r\n          render({ data }) {\r\n            isFunction(onSuccess) && onSuccess(data)\r\n            return 'Se envió el mensaje con éxito'\r\n          }\r\n        }\r\n      })\r\n      client.invalidateQueries([TICKETS_SUPPORT_LIST_KEYS.ASSIGNED_LIST])\r\n      client.invalidateQueries([TICKETS_SUPPORT_LIST_KEYS.GENERATED_LIST])\r\n    } catch (error) {\r\n      const errorFormatted = getErrorAPI(\r\n        error,\r\n        `No se puede realizar esta operación en este momento. Intente nuevamente o reporte a sistemas`\r\n      )\r\n      isFunction(onError) && onError(errorFormatted)\r\n      toast.error(errorFormatted, {\r\n        type: getNotificationTypeByErrorCode(error)\r\n      })\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...setMessage,\r\n    mutate\r\n  }\r\n}\r\n","import { lazy, useMemo, useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Divider, LinearProgress, Stack } from '@mui/material'\r\nimport { useFormik } from 'formik'\r\nimport { toast } from 'react-toastify'\r\nimport * as Yup from 'yup'\r\n\r\nimport { AddMessageToTicketAdapter } from '../../adapters'\r\nimport { useAddNewMessageToTicket } from '../../hooks'\r\n\r\nimport { Lodable } from '@/shared/components/lodables'\r\nimport { useUser } from '@/shared/hooks'\r\n\r\nconst TicketMessages = Lodable(lazy(() => import('./TicketMessages')))\r\nconst TicketAddAttachmentFiles = Lodable(lazy(() => import('./TicketAddAttachmentFiles')))\r\nconst TicketMessageInput = Lodable(lazy(() => import('./TicketMessageInput')))\r\n\r\nconst TicketConversationLayout = ({ ticket, queryTicketConversation }) => {\r\n  const { mutate, isLoading: isLoadingNewMessage } = useAddNewMessageToTicket()\r\n  const user = useUser()\r\n  const [scroll, setScroll] = useState(false)\r\n\r\n  const RegisterSchema = Yup.object().shape({\r\n    message: Yup.string().required('El mensaje es requerido'),\r\n    attachments: Yup.array()\r\n  })\r\n\r\n  const formik = useFormik({\r\n    validateOnChange: false,\r\n    enableReinitialize: false,\r\n    initialValues: {\r\n      message: '',\r\n      attachments: []\r\n    },\r\n    validationSchema: RegisterSchema,\r\n    onSubmit: (values, { setSubmitting, resetForm }) => {\r\n      const message = AddMessageToTicketAdapter(ticket?.id, values, user)\r\n      mutate(message, {\r\n        onSuccess: () => {\r\n          setSubmitting(false)\r\n          resetForm()\r\n        },\r\n        onError: () => {\r\n          setSubmitting(false)\r\n        }\r\n      })\r\n    }\r\n  })\r\n\r\n  const { handleSubmit, isSubmitting, values, setFieldValue, validateForm } = formik\r\n\r\n  const isLoading = isSubmitting || isLoadingNewMessage\r\n\r\n  const handleFileChange = event => {\r\n    const files = Array.from(event.target.files)\r\n    setFieldValue('attachments', [...files, ...values.attachments])\r\n  }\r\n\r\n  const handleRemoveFile = selectedFile => {\r\n    setFieldValue(\r\n      'attachments',\r\n      values?.attachments?.filter(file => file !== selectedFile)\r\n    )\r\n  }\r\n\r\n  const handleAddMessage = async e => {\r\n    e.preventDefault()\r\n    setScroll(true)\r\n    const validate = await validateForm()\r\n\r\n    if (validate && Object.keys(validate)?.length > 0) {\r\n      window.scrollTo(0, 0)\r\n      toast.warn('Verifique todos los campos obligatorios')\r\n    }\r\n\r\n    handleSubmit()\r\n  }\r\n  const files = useMemo(() => values?.attachments, [values?.attachments])\r\n\r\n  return (\r\n    <>\r\n      {queryTicketConversation?.isFetching && <LinearProgress />}\r\n      <Stack sx={{ overflow: 'hidden' }}>\r\n        <TicketMessages queryTicketConversation={queryTicketConversation} scroll={scroll} setScroll={setScroll} />\r\n      </Stack>\r\n\r\n      <Stack flex={1} justifyContent={'flex-end'}>\r\n        {queryTicketConversation?.isFetching && <LinearProgress />}\r\n        <Divider />\r\n        {!isLoading && (\r\n          <TicketAddAttachmentFiles files={files} isLoading={isLoading} handleRemoveFile={handleRemoveFile} />\r\n        )}\r\n        {ticket?.status?.id !== '3' && (\r\n          <TicketMessageInput\r\n            formik={formik}\r\n            isLoading={isLoading}\r\n            handleAddMessage={handleAddMessage}\r\n            handleFileChange={handleFileChange}\r\n          />\r\n        )}\r\n      </Stack>\r\n    </>\r\n  )\r\n}\r\n\r\nTicketConversationLayout.propTypes = {\r\n  queryTicketConversation: PropTypes.shape({\r\n    isFetching: PropTypes.any\r\n  }),\r\n  ticket: PropTypes.shape({\r\n    id: PropTypes.any,\r\n    status: PropTypes.shape({\r\n      id: PropTypes.string\r\n    })\r\n  })\r\n}\r\n\r\nexport default TicketConversationLayout\r\n"],"file":"assets/js/TicketConversationLayout-BGg101ib.js"}