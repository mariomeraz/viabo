{"version":3,"file":"ResumeTransactionForm-0JEbCqgi.js","sources":["../../../../../frontend/src/app/business/viabo-card/cards/adapters/cardTransactionsAdapter.js","../../../../../frontend/src/app/business/viabo-card/cards/hooks/useTransactionCard.js","../../../../../frontend/src/app/business/viabo-card/cards/components/transfer/ResumeTransactionForm.jsx"],"sourcesContent":["import { getCryptInfo } from '@/shared/utils'\r\n\r\nexport const CardTransactionsAdapter = (originCardId, transactions, concept, isGlobal) => {\r\n  let adaptedData\r\n  if (isGlobal) {\r\n    adaptedData = {\r\n      originCardId,\r\n      destinationCards: [\r\n        {\r\n          cardId: transactions?.card?.value.toString(),\r\n          concept: concept?.toString() || '',\r\n          amount: parseFloat(\r\n            transactions?.amount.toString() === '' ? '0' : transactions?.amount?.toString().replace(/,/g, '')\r\n          ).toString()\r\n        }\r\n      ]\r\n    }\r\n  } else {\r\n    adaptedData = {\r\n      originCardId,\r\n      destinationCards: transactions?.map(transaction => ({\r\n        cardId: transaction?.card?.value?.toString(),\r\n        concept: concept?.toString() || '',\r\n        amount: parseFloat(\r\n          transaction?.amount.toString() === '' ? '0' : transaction?.amount?.toString().replace(/,/g, '')\r\n        ).toString()\r\n      }))\r\n    }\r\n  }\r\n\r\n  return {\r\n    cardId: adaptedData?.originCardId,\r\n    data: getCryptInfo(adaptedData)\r\n  }\r\n}\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { CARDS_COMMERCES_KEYS } from '@/app/business/viabo-card/cards/adapters'\r\nimport { transactionsCard } from '@/app/business/viabo-card/cards/services'\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useTransactionCard = (options = {}) => {\r\n  const client = useQueryClient()\r\n\r\n  const transactionMutate = useMutation(transactionsCard, options)\r\n  const transaction = async (formData, options) => {\r\n    const { onSuccess, onError, mutationOptions } = options\r\n\r\n    try {\r\n      await toast.promise(transactionMutate.mutateAsync(formData, mutationOptions), {\r\n        pending: 'Procesando Transferencia ...',\r\n        success: {\r\n          render({ data: transactions }) {\r\n            client.fetchQuery([CARDS_COMMERCES_KEYS.TRANSIT_BALANCE])\r\n            client.invalidateQueries([CARDS_COMMERCES_KEYS.CARD_INFO, transactions?.cardId])\r\n            client.fetchQuery([CARDS_COMMERCES_KEYS.CARD_MOVEMENTS, transactions?.cardId])\r\n            client.fetchQuery([CARDS_COMMERCES_KEYS.MAIN_CARD])\r\n            onSuccess(transactions)\r\n            return 'Se realizo la transferencia con éxito'\r\n          }\r\n        }\r\n      })\r\n    } catch (error) {\r\n      const errorFormatted = getErrorAPI(\r\n        error,\r\n        `No se puede realizar esta operación en este momento. Intente nuevamente o reporte a sistemas`\r\n      )\r\n      onError(errorFormatted)\r\n      toast.error(errorFormatted, {\r\n        type: getNotificationTypeByErrorCode(error)\r\n      })\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...transactionMutate,\r\n    transaction\r\n  }\r\n}\r\n","import { useMemo } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { ArrowBackIos } from '@mui/icons-material'\r\nimport { LoadingButton } from '@mui/lab'\r\nimport {\r\n  Box,\r\n  Button,\r\n  Stack,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  styled\r\n} from '@mui/material'\r\n\r\nimport { CardTransactionsAdapter } from '../../adapters'\r\nimport { useTransactionCard } from '../../hooks'\r\n\r\nimport { getCardTypeByName } from '@/app/shared/services'\r\nimport { Scrollbar } from '@/shared/components/scroll'\r\nimport { fCurrency } from '@/shared/utils'\r\n\r\nconst RowResultStyle = styled(TableRow)(({ theme }) => ({\r\n  '& td': {\r\n    paddingTop: theme.spacing(0.5),\r\n    paddingBottom: theme.spacing(0.5)\r\n  }\r\n}))\r\n\r\nconst ResumeTransactionForm = ({ data, onBack, setTransactionLoading, transactionLoading, onClose }) => {\r\n  const { transaction: transactionCard, isLoading: isSending } = useTransactionCard()\r\n\r\n  const transactions = useMemo(() => (data?.isGlobal ? [data?.transactions] : data?.transactions) || [], [data])\r\n  const total = useMemo(() => (parseFloat(data?.balance) - data?.currentBalance).toFixed(2) || 0, [data])\r\n\r\n  const handleSubmit = () => {\r\n    const { cardOriginId, transactions, isGlobal, concept } = data\r\n    const dataAdapted = CardTransactionsAdapter(cardOriginId, transactions, concept, isGlobal)\r\n    setTransactionLoading(true)\r\n    transactionCard(dataAdapted, {\r\n      onSuccess: () => {\r\n        onClose()\r\n      },\r\n      onError: () => {\r\n        setTransactionLoading(false)\r\n      }\r\n    })\r\n  }\r\n\r\n  const cardTypeLogo = useMemo(() => getCardTypeByName(data?.paymentProcessor), [data])\r\n\r\n  const CardLogoComponent = cardTypeLogo?.component\r\n\r\n  return (\r\n    <>\r\n      <Scrollbar>\r\n        <TableContainer sx={{ minWidth: 200 }}>\r\n          <Table>\r\n            <TableHead\r\n              sx={{\r\n                borderBottom: theme => `solid 1px ${theme.palette.divider}`\r\n              }}\r\n            >\r\n              <TableRow>\r\n                <TableCell width={40}>#</TableCell>\r\n                <TableCell align=\"left\">Movimiento</TableCell>\r\n                <TableCell align=\"right\">Monto</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n\r\n            <TableBody>\r\n              {transactions?.map((row, index) => (\r\n                <TableRow\r\n                  key={index}\r\n                  sx={{\r\n                    borderBottom: theme => `solid 1px ${theme.palette.divider}`\r\n                  }}\r\n                >\r\n                  <TableCell>{index + 1}</TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <Box sx={{ maxWidth: 200 }}>\r\n                      <Typography variant=\"subtitle2\">{row?.card?.cardUserNumber || 'Cuenta Global'}</Typography>\r\n                      <Typography variant=\"body2\" sx={{ color: 'text.secondary' }} noWrap>\r\n                        {row?.concept}\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">{fCurrency(row?.amount)}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n\r\n              <RowResultStyle>\r\n                <TableCell colSpan={1} />\r\n                <TableCell align=\"right\">\r\n                  <Stack flexDirection={'row'} gap={1} alignItems={'center'} justifyContent={'flex-end'}>\r\n                    <Typography>Saldo Disponible</Typography>\r\n                    {cardTypeLogo && <CardLogoComponent sx={{ width: 30, height: 30 }} />}\r\n                  </Stack>\r\n                </TableCell>\r\n                <TableCell align=\"right\" width={120}>\r\n                  <Typography>{fCurrency(data?.balance)}</Typography>\r\n                </TableCell>\r\n              </RowResultStyle>\r\n\r\n              <RowResultStyle>\r\n                <TableCell colSpan={1} />\r\n                <TableCell align=\"right\">\r\n                  <Typography variant=\"h6\">Total a dispersar</Typography>\r\n                </TableCell>\r\n                <TableCell align=\"right\" width={120}>\r\n                  <Typography variant=\"h6\" sx={{ color: 'error.main' }}>\r\n                    {fCurrency(-data?.currentBalance)}\r\n                  </Typography>\r\n                </TableCell>\r\n              </RowResultStyle>\r\n\r\n              <RowResultStyle>\r\n                <TableCell colSpan={1} />\r\n                <TableCell align=\"right\">\r\n                  <Typography>Total después de movimiento</Typography>\r\n                </TableCell>\r\n                <TableCell align=\"right\" width={140}>\r\n                  <Typography>{fCurrency(total)}</Typography>\r\n                </TableCell>\r\n              </RowResultStyle>\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Scrollbar>\r\n      <Stack sx={{ p: 3 }} spacing={3}>\r\n        <LoadingButton\r\n          size={'large'}\r\n          onClick={handleSubmit}\r\n          loading={isSending || transactionLoading}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          fullWidth\r\n          type=\"submit\"\r\n          sx={{ fontWeight: 'bold' }}\r\n        >\r\n          Realizar\r\n        </LoadingButton>\r\n\r\n        {(!isSending || !transactionLoading) && (\r\n          <Button onClick={onBack} variant=\"outlined\" color=\"inherit\" fullWidth startIcon={<ArrowBackIos />}>\r\n            Regresar\r\n          </Button>\r\n        )}\r\n      </Stack>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResumeTransactionForm\r\n\r\nResumeTransactionForm.propTypes = {\r\n  data: PropTypes.shape({\r\n    balance: PropTypes.any,\r\n    cardOriginId: PropTypes.any,\r\n    paymentProcessor: PropTypes.any,\r\n    currentBalance: PropTypes.any,\r\n    isGlobal: PropTypes.any,\r\n    transactions: PropTypes.any,\r\n    concept: PropTypes.any\r\n  }),\r\n  onBack: PropTypes.any,\r\n  onClose: PropTypes.func,\r\n  setTransactionLoading: PropTypes.func,\r\n  transactionLoading: PropTypes.any\r\n}\r\n"],"names":["CardTransactionsAdapter","originCardId","transactions","concept","isGlobal","adaptedData","_a","_b","transaction","_c","getCryptInfo","useTransactionCard","options","client","useQueryClient","transactionMutate","useMutation","transactionsCard","formData","onSuccess","onError","mutationOptions","toast","CARDS_COMMERCES_KEYS","error","errorFormatted","getErrorAPI","getNotificationTypeByErrorCode","RowResultStyle","styled","TableRow","theme","paddingTop","spacing","paddingBottom","ResumeTransactionForm","data","onBack","setTransactionLoading","transactionLoading","onClose","transactionCard","isLoading","isSending","useMemo","total","parseFloat","balance","currentBalance","toFixed","handleSubmit","cardOriginId","dataAdapted","cardTypeLogo","getCardTypeByName","paymentProcessor","CardLogoComponent","component","jsxs","Fragment","jsx","Scrollbar","TableContainer","minWidth","Table","TableHead","borderBottom","palette","divider","TableCell","TableBody","map","row","index","Box","maxWidth","Typography","card","cardUserNumber","color","fCurrency","amount","Stack","width","height","p","LoadingButton","fontWeight","Button","ArrowBackIos","propTypes","PropTypes","shape","any","func"],"mappings":"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"}