{"version":3,"file":"FormAssignCards-C0wyzKCe.js","sources":["../../../../../frontend/src/app/business/viabo-card/all-commerce-cards/adapters/assignCardsAdapter.js","../../../../../frontend/src/app/business/viabo-card/all-commerce-cards/hooks/useAssignCards.js","../../../../../frontend/src/app/business/viabo-card/all-commerce-cards/components/assign-card/FormAssignCards.jsx"],"sourcesContent":["import { getCryptInfo } from '@/shared/utils'\r\n\r\nexport const AssignCardsAdapter = (formValues, cards, isEmptyCVV) => {\r\n  const { phone, email, name } = formValues\r\n  const data = {\r\n    name,\r\n    phone,\r\n    email,\r\n    cards: isEmptyCVV\r\n      ? [{ id: cards[0]?.id, cvv: formValues?.cvv }]\r\n      : cards?.map(card => ({\r\n          id: card?.id,\r\n          cvv: card?.cvv\r\n        })) || []\r\n  }\r\n  return getCryptInfo(data)\r\n}\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { ALL_COMMERCE_CARDS_KEYS } from '@/app/business/viabo-card/all-commerce-cards/adapters'\r\nimport { assignCards } from '@/app/business/viabo-card/all-commerce-cards/services'\r\nimport { CARDS_COMMERCES_KEYS } from '@/app/business/viabo-card/cards/adapters'\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useAssignCards = (options = {}) => {\r\n  const client = useQueryClient()\r\n\r\n  const transactionMutate = useMutation(assignCards, options)\r\n  const transaction = async (formData, options) => {\r\n    const { onSuccess, onError, mutationOptions } = options\r\n\r\n    try {\r\n      await toast.promise(transactionMutate.mutateAsync(formData, mutationOptions), {\r\n        pending: 'Asignando Tarjetas ...',\r\n        success: {\r\n          render({ data }) {\r\n            client.invalidateQueries([ALL_COMMERCE_CARDS_KEYS.LIST])\r\n            client.invalidateQueries([CARDS_COMMERCES_KEYS.CARDS_COMMERCE_LIST])\r\n            onSuccess()\r\n            return 'Se asignaron las tarjetas con éxito'\r\n          }\r\n        }\r\n      })\r\n    } catch (error) {\r\n      const errorFormatted = getErrorAPI(\r\n        error,\r\n        `No se puede realizar esta operacion en este momento. Intente nuevamente o reporte a sistemas`\r\n      )\r\n      onError(errorFormatted)\r\n      toast.error(errorFormatted, {\r\n        type: getNotificationTypeByErrorCode(error)\r\n      })\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...transactionMutate,\r\n    mutate: transaction\r\n  }\r\n}\r\n","import { useMemo } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { AddCard, EmailOutlined, VpnKey } from '@mui/icons-material'\r\nimport { LoadingButton } from '@mui/lab'\r\nimport { Alert, InputAdornment, Stack, Typography } from '@mui/material'\r\nimport { useFormik } from 'formik'\r\nimport { MuiTelInput } from 'mui-tel-input'\r\nimport * as Yup from 'yup'\r\n\r\nimport { AssignCardsAdapter } from '@/app/business/viabo-card/all-commerce-cards/adapters'\r\nimport { useAssignCards } from '@/app/business/viabo-card/all-commerce-cards/hooks'\r\nimport { FormProvider, MaskedInput, RFTextField } from '@/shared/components/form'\r\nimport { Scrollbar } from '@/shared/components/scroll'\r\n\r\nfunction FormAssignCards({ cards, onSuccess }) {\r\n  const { mutate: assignCards, isLoading: isAssigning } = useAssignCards()\r\n\r\n  const emptyCVV = useMemo(() => Boolean(cards?.length > 0 && cards[0].cvv === ''), [cards])\r\n\r\n  const registerValidation = Yup.object({\r\n    name: Yup.string().required('El nombre es requerido'),\r\n    email: Yup.string().email('Ingresa un correo valido').required('El correo es requerido'),\r\n    phone: Yup.string().test(\r\n      'longitud',\r\n      'El telefono es muy corto',\r\n      value => !(value && value.replace(/[\\s+]/g, '').length < 10)\r\n    ),\r\n    ...(emptyCVV && {\r\n      cvv: Yup.string().min(3, 'Debe contener 3 digitos').required('El CVV es requerido')\r\n    })\r\n  })\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      name: '',\r\n      phone: '',\r\n      email: '',\r\n      ...(emptyCVV && {\r\n        cvv: ''\r\n      })\r\n    },\r\n    validationSchema: registerValidation,\r\n    onSubmit: values => {\r\n      const data = AssignCardsAdapter(values, cards, emptyCVV)\r\n      assignCards(data, {\r\n        onSuccess: () => {\r\n          setSubmitting(false)\r\n          onSuccess()\r\n        },\r\n        onError: () => {\r\n          setSubmitting(false)\r\n        }\r\n      })\r\n    }\r\n  })\r\n\r\n  const { errors, touched, isSubmitting, setFieldValue, values, setSubmitting } = formik\r\n\r\n  const loading = isSubmitting || isAssigning\r\n\r\n  return (\r\n    <Scrollbar containerProps={{ sx: { flexGrow: 0, height: 'auto' } }}>\r\n      <FormProvider formik={formik}>\r\n        <Stack spacing={3} sx={{ p: 3 }}>\r\n          {emptyCVV && (\r\n            <Alert\r\n              sx={{\r\n                textAlign: 'center',\r\n                width: '100%',\r\n                justifyContent: 'center',\r\n                display: 'flex'\r\n              }}\r\n              severity=\"warning\"\r\n            >\r\n              <Typography variant=\"caption\" fontWeight={'bold'}>\r\n                En caso de no capturar los datos correctos de la tarjeta, la información de la misma podrá ser erronea.\r\n              </Typography>\r\n            </Alert>\r\n          )}\r\n          <Stack>\r\n            <Typography paragraph variant=\"overline\" sx={{ color: 'text.disabled' }}>\r\n              Nombre\r\n            </Typography>\r\n            <RFTextField name={'name'} required={true} placeholder={'Usuario'} disabled={loading} />\r\n          </Stack>\r\n\r\n          <Stack>\r\n            <Typography paragraph variant=\"overline\" sx={{ color: 'text.disabled' }}>\r\n              Correo Electrónico\r\n            </Typography>\r\n            <RFTextField\r\n              name={'email'}\r\n              required={true}\r\n              placeholder={'usuario@dominio.com'}\r\n              disabled={loading}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <EmailOutlined />\r\n                  </InputAdornment>\r\n                )\r\n              }}\r\n            />\r\n          </Stack>\r\n\r\n          <Stack>\r\n            <Typography paragraph variant=\"overline\" sx={{ color: 'text.disabled' }}>\r\n              Telefono\r\n            </Typography>\r\n            <MuiTelInput\r\n              name=\"phone\"\r\n              fullWidth\r\n              langOfCountryName=\"es\"\r\n              preferredCountries={['MX', 'US']}\r\n              continents={['NA', 'SA']}\r\n              value={values.phone || '+52'}\r\n              disabled={loading}\r\n              onChange={(value, info) => {\r\n                setFieldValue('phone', value)\r\n              }}\r\n              error={touched.phone && Boolean(errors.phone)}\r\n              helperText={touched.phone && errors.phone}\r\n            />\r\n          </Stack>\r\n          {emptyCVV && (\r\n            <Stack>\r\n              <Typography paragraph variant=\"overline\" sx={{ color: 'text.disabled' }}>\r\n                CVV\r\n              </Typography>\r\n              <RFTextField\r\n                name={'cvv'}\r\n                fullWidth\r\n                required={true}\r\n                placeholder={'123'}\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <VpnKey />\r\n                    </InputAdornment>\r\n                  ),\r\n                  inputComponent: MaskedInput,\r\n                  inputProps: {\r\n                    mask: '000',\r\n                    onAccept: value => {\r\n                      setFieldValue('cvv', value)\r\n                    },\r\n                    value: values.cvv\r\n                  }\r\n                }}\r\n                disabled={loading}\r\n              />\r\n            </Stack>\r\n          )}\r\n\r\n          <Stack sx={{ pt: 3 }}>\r\n            <LoadingButton\r\n              loading={isSubmitting}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              fullWidth\r\n              type=\"submit\"\r\n              startIcon={<AddCard />}\r\n            >\r\n              Asociar\r\n            </LoadingButton>\r\n          </Stack>\r\n        </Stack>\r\n      </FormProvider>\r\n    </Scrollbar>\r\n  )\r\n}\r\n\r\nexport default FormAssignCards\r\n\r\nFormAssignCards.propTypes = {\r\n  cards: PropTypes.array,\r\n  onSuccess: PropTypes.func\r\n}\r\n"],"names":["AssignCardsAdapter","formValues","cards","isEmptyCVV","phone","email","name","data","_a","card","getCryptInfo","useAssignCards","options","client","useQueryClient","transactionMutate","useMutation","assignCards","formData","onSuccess","onError","mutationOptions","toast","ALL_COMMERCE_CARDS_KEYS","CARDS_COMMERCES_KEYS","error","errorFormatted","getErrorAPI","getNotificationTypeByErrorCode","FormAssignCards","mutate","isLoading","isAssigning","emptyCVV","useMemo","length","cvv","registerValidation","Yup","required","string","test","value","replace","min","formik","useFormik","initialValues","validationSchema","onSubmit","values","setSubmitting","errors","touched","isSubmitting","setFieldValue","loading","jsx","Scrollbar","sx","flexGrow","height","FormProvider","Stack","p","Alert","textAlign","width","justifyContent","display","Typography","color","RFTextField","startAdornment","InputAdornment","EmailOutlined","MuiTelInput","info","Boolean","VpnKey","inputComponent","MaskedInput","inputProps","mask","onAccept","pt","LoadingButton","AddCard","propTypes","PropTypes","array","func"],"mappings":"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"}