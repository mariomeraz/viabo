{"version":3,"mappings":"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","names":["TransactionForm","Lodable","lazy","ResumeTransactionForm","FundingCommerceCardsDrawer","open","setOpen","card","cardList","currentBalance","setCurrentBalance","useState","balance","useMemo","showResume","setShowResume","transactionData","setTransactionData","transactionLoading","setTransactionLoading","insufficient","parseFloat","toFixed","handleClose","handleSuccessForm","values","cardOriginId","id","paymentProcessor","isGlobal","transactions","concept","handleBackResume","titleTransaction","jsx","Typography","renderContentTransaction","jsxs","Fragment","Stack","fCurrency","RightPanel","motion","opacity","duration","display","flex","overflow","flexDirection","propTypes","PropTypes","shape","any","array","func","FundingGlobalCard","isRefetchingCards","commerceCards","isCollapse","useCollapseDrawer","setOpenFundingOrder","useCommerceDetailsCard","state","setFundingCard","openTransfer","setOpenTransfer","lg","xl","Button","Receipt","LoadingButton","CreditCard","MainCardDetails","cardSelected","disableFilter","copiedSPEI","setCopiedSPEI","copiedCardNumber","setCopiedCardNumber","cardLogo","getCardTypeByName","CardLogoComponent","component","selected","setGlobalCard","setIsMaster","setFilterPaymentProcessor","useMasterGlobalStore","mutate","changeStatusCard","isLoading","isChangingStatusCard","useToggleStatusCard","cardIdToggleStatus","setCardIdToggleStatus","commerceCardsByPaymentProcessor","paymentProcessorId","total","length","handleSelectPaymentProcessor","e","isChangingStatus","Card","minWidth","xs","md","border","borderColor","theme","palette","mode","secondary","main","primary","CardHeader","flexWrap","IconButton","cardNumber","copyToClipboard","setTimeout","width","height","Check","color","SPEI","SpeiLogo","CircularLoading","ml","IOSSwitch","cardON","onSuccess","onError","px","py","Box","div","whileTap","scale","style","cursor","balanceFormatted","Update","inTransitFormatted","Divider","borderStyle","cardId","bool","PAYMENT_PROCESSORS","GlobalCardsAdapter","cards","decryptedCards","getDecryptInfo","masterBalance","masterTransit","dataAdapted","_a","MasterMovementsAdapter","movements","decryptedMovements","expenses","income","expensesWithoutInvoice","expensesWithInvoice","expensesWithoutChecked","movement","amount","expensesControlFiles","invoiceFiles","result","file","isInvoice","date","format","es","time","IS_OTHERS_CHARGES_TYPE","_b","fDateTime","_c","getGlobalCards","data","axios","getMasterMovements","initialDate","finalDate","signal","fetchURL","getCommerceCardsByPaymentProcessors","paymentProcessors","resultsByPaymentProcessorId","requests","response","CardsAdapter","useFindCommerceCardsByPaymentProcessors","options","customError","setCustomError","query","useQuery","DASHBOARD_MASTER_KEYS","useEffect","errorMessage","getErrorAPI","toast","getNotificationTypeByErrorCode","useFindGlobalCards","setMainCard","error","useFindMasterMovements","startDate","endDate","startOfDay","endOfDay","setMovements","setFilterDate","MasterGlobalCards","isFetching","isFetchingGlobalCards","resetGlobalCard","isMaster","paymentProcessorsIds","globals","reduce","accumulator","processor","push","isRefetching","enabled","master","size","AnimatePresence","RequestLoadingComponent","zIndex","p","map","VerifyExpensesDrawer","BalanceDrawer","__vitePreload","MasterMovements","currentDate","Date","filterPaymentProcessor","getBalance","filterDate","initialStartDate","sub","days","initialEndDate","setStartDate","setEndDate","openVerifyExpenses","setOpenVerifyExpenses","openBalance","setOpenBalance","isError","refetch","filterMovements","filter","toLowerCase","forEach","type","operationType","verified","expensesControl","balanceMovements","totalExpensesOtherCharges","handleDateRange","range","handleValidateExpenses","table","getSelectedRowModel","flatRows","row","original","someHasVerified","some","someHasDifferentOperationType","warn","columns","accessorKey","header","enableHiding","Cell","cell","column","rowData","MovementDescriptionColumn","fullDate","filterVariant","operationLogo","getOperationTypeByName","OperationLogoComponent","LuReceipt","isIncome","isViaboPay","amountFormat","BsPatchCheck","BiBlock","useMaterialTable","enableColumnPinning","enableColumnFilterModes","enableStickyHeader","enableRowVirtualization","enableFacetedValues","enableRowActions","enableRowSelection","enableDensityToggle","positionActionsColumn","selectAllMode","initialState","density","sorting","desc","showAlertBanner","showProgressBars","displayColumnDefOptions","maxSize","muiTableContainerProps","sx","maxHeight","renderTopToolbarCustomActions","gap","handleValidateSamePaymentProcessor","renderRowActionMenuItems","MenuItem","console","info","selectedMovements","useCallback","firstPaymentProcessor","Boolean","every","obj","getIsSomeRowsSelected","CardMovementsHeader","MaterialDataTable","text","DashboardMaster","Page","ContainerPage","HeaderPage","name","href","PATH_DASHBOARD","root","FundingOrder"],"sources":["../../../../../frontend/src/app/business/dashboard-master/components/funding/FundingCommerceCardsDrawer.jsx","../../../../../frontend/src/app/business/dashboard-master/components/funding/FundingGlobalCard.jsx","../../../../../frontend/src/app/business/dashboard-master/components/MainCardDetails.jsx","../../../../../frontend/src/app/business/dashboard-master/adapters/globalCardsAdapter.js","../../../../../frontend/src/app/business/dashboard-master/adapters/masterMovementsAdapter.js","../../../../../frontend/src/app/business/dashboard-master/services/DashboardMasterRepository.js","../../../../../frontend/src/app/business/dashboard-master/hooks/useFindCommerceCardsByPaymentProcessors.js","../../../../../frontend/src/app/business/dashboard-master/hooks/useFindGlobalCards.js","../../../../../frontend/src/app/business/dashboard-master/hooks/useFindMasterMovements.js","../../../../../frontend/src/app/business/dashboard-master/components/MasterGlobalCards.jsx","../../../../../frontend/src/app/business/dashboard-master/components/movements/MasterMovements.jsx","../../../../../frontend/src/app/business/dashboard-master/pages/DashboardMaster.jsx"],"sourcesContent":["import { lazy, useMemo, useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Stack, Typography } from '@mui/material'\r\nimport { motion } from 'framer-motion'\r\n\r\nimport { RightPanel } from '@/app/shared/components'\r\nimport { Lodable } from '@/shared/components/lodables'\r\nimport { fCurrency } from '@/shared/utils'\r\n\r\nconst TransactionForm = Lodable(lazy(() => import('../../../viabo-card/cards/components/transfer/TransactionForm')))\r\nconst ResumeTransactionForm = Lodable(\r\n  lazy(() => import('../../../viabo-card/cards/components/transfer/ResumeTransactionForm'))\r\n)\r\n\r\nconst FundingCommerceCardsDrawer = ({ open, setOpen, card, cardList = [] }) => {\r\n  const [currentBalance, setCurrentBalance] = useState(0)\r\n  const balance = useMemo(() => card?.balance, [card?.balance])\r\n  const [showResume, setShowResume] = useState(false)\r\n  const [transactionData, setTransactionData] = useState(null)\r\n  const [transactionLoading, setTransactionLoading] = useState(false)\r\n\r\n  const insufficient = useMemo(\r\n    () => Boolean((parseFloat(balance) - currentBalance).toFixed(2) < 0),\r\n    [currentBalance, balance]\r\n  )\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n    setCurrentBalance(0)\r\n    setShowResume(false)\r\n    setTransactionData(null)\r\n    setTransactionLoading(false)\r\n  }\r\n\r\n  const handleSuccessForm = values => {\r\n    const isGlobal = false\r\n    const cardOriginId = card?.id\r\n\r\n    setTransactionData({\r\n      cardOriginId,\r\n      paymentProcessor: card?.paymentProcessor,\r\n      isGlobal,\r\n      transactions: values?.transactions || [],\r\n      concept: values?.concept,\r\n      balance,\r\n      currentBalance\r\n    })\r\n    setShowResume(true)\r\n  }\r\n\r\n  const handleBackResume = () => {\r\n    setShowResume(false)\r\n  }\r\n\r\n  const titleTransaction = <Typography variant=\"h6\"> Revisión - Fondeo Tarjetas</Typography>\r\n\r\n  const renderContentTransaction = (\r\n    <>\r\n      <Stack flexDirection=\"column\" alignItems={'center'} justifyContent={'space-between'} spacing={0} px={3} pt={2}>\r\n        <Typography variant=\"subtitle1\">Saldo</Typography>\r\n        <Stack direction={'row'} spacing={1} alignItems={'center'}>\r\n          <Typography variant=\"h3\" color={'success.main'}>\r\n            {fCurrency(balance)}\r\n          </Typography>\r\n          <Typography variant=\"caption\" color={'success.main'}>\r\n            MXN\r\n          </Typography>\r\n        </Stack>\r\n        <Stack direction={'row'} spacing={1} alignItems={'center'}>\r\n          <Typography variant=\"subtitle1\" color={'error'}>\r\n            - {fCurrency(currentBalance)}\r\n          </Typography>\r\n          <Typography variant=\"caption\" color={'error'}>\r\n            MXN\r\n          </Typography>\r\n        </Stack>\r\n        {insufficient && (\r\n          <Typography variant=\"caption\" color={'warning.main'} textAlign={'center'}>\r\n            Saldo insuficiente para realizar la(s) operacion(es)\r\n          </Typography>\r\n        )}\r\n      </Stack>\r\n      <TransactionForm\r\n        cards={cardList}\r\n        setCurrentBalance={setCurrentBalance}\r\n        insufficient={insufficient}\r\n        isBinCard={false}\r\n        onSuccess={handleSuccessForm}\r\n      />\r\n    </>\r\n  )\r\n\r\n  return (\r\n    <RightPanel open={open} handleClose={handleClose} titleElement={titleTransaction}>\r\n      {open && (\r\n        <>\r\n          <motion.div\r\n            initial={{ opacity: 1 }}\r\n            animate={{ opacity: showResume ? 0 : 1 }}\r\n            transition={{ duration: 0.5 }}\r\n            style={{\r\n              display: showResume ? 'none' : 'flex',\r\n              flex: 1,\r\n              overflow: 'hidden',\r\n              flexDirection: 'column'\r\n            }}\r\n          >\r\n            {renderContentTransaction}\r\n          </motion.div>\r\n          <motion.div\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: showResume ? 1 : 0 }}\r\n            transition={{ duration: 0.5 }}\r\n            style={{\r\n              display: showResume ? 'flex' : 'none',\r\n              flexDirection: 'column',\r\n              flex: 1,\r\n              overflow: 'hidden'\r\n            }}\r\n          >\r\n            <ResumeTransactionForm\r\n              data={transactionData}\r\n              onBack={handleBackResume}\r\n              setTransactionLoading={setTransactionLoading}\r\n              transactionLoading={transactionLoading}\r\n              onClose={handleClose}\r\n            />\r\n          </motion.div>\r\n        </>\r\n      )}\r\n    </RightPanel>\r\n  )\r\n}\r\n\r\nFundingCommerceCardsDrawer.propTypes = {\r\n  card: PropTypes.shape({\r\n    balance: PropTypes.any,\r\n    id: PropTypes.any,\r\n    paymentProcessor: PropTypes.any\r\n  }),\r\n  cardList: PropTypes.array,\r\n  open: PropTypes.any,\r\n  setOpen: PropTypes.func\r\n}\r\n\r\nexport default FundingCommerceCardsDrawer\r\n","import { useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { CreditCard, Receipt } from '@mui/icons-material'\r\nimport { LoadingButton } from '@mui/lab'\r\nimport { Button, Stack } from '@mui/material'\r\n\r\nimport FundingCommerceCardsDrawer from './FundingCommerceCardsDrawer'\r\n\r\nimport { useCommerceDetailsCard } from '@/app/business/viabo-card/cards/store'\r\nimport { useCollapseDrawer } from '@/theme/hooks'\r\n\r\nexport function FundingGlobalCard({ isRefetchingCards, commerceCards, card }) {\r\n  const { isCollapse } = useCollapseDrawer()\r\n\r\n  const setOpenFundingOrder = useCommerceDetailsCard(state => state.setOpenFundingOrder)\r\n  const setFundingCard = useCommerceDetailsCard(state => state.setFundingCard)\r\n\r\n  const [openTransfer, setOpenTransfer] = useState(false)\r\n\r\n  return (\r\n    <>\r\n      <Stack\r\n        px={2}\r\n        py={1}\r\n        gap={1}\r\n        flexDirection={{ lg: isCollapse ? 'row' : 'column', xl: 'row' }}\r\n        justifyContent={'space-between'}\r\n      >\r\n        <Button\r\n          color={'primary'}\r\n          variant={'text'}\r\n          startIcon={<Receipt />}\r\n          size=\"small\"\r\n          onClick={() => {\r\n            setOpenFundingOrder(true)\r\n            setFundingCard(card)\r\n          }}\r\n        >\r\n          Orden Fondeo\r\n        </Button>\r\n\r\n        <LoadingButton\r\n          size=\"small\"\r\n          variant=\"text\"\r\n          color=\"primary\"\r\n          startIcon={<CreditCard />}\r\n          loading={isRefetchingCards}\r\n          onClick={() => {\r\n            setOpenTransfer(true)\r\n          }}\r\n        >\r\n          Fondear Tarjetas\r\n        </LoadingButton>\r\n      </Stack>\r\n      <FundingCommerceCardsDrawer setOpen={setOpenTransfer} open={openTransfer} card={card} cardList={commerceCards} />\r\n    </>\r\n  )\r\n}\r\n\r\nFundingGlobalCard.propTypes = {\r\n  card: PropTypes.any,\r\n  commerceCards: PropTypes.any,\r\n  isRefetchingCards: PropTypes.any\r\n}\r\n","import { useMemo, useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Check, Update } from '@mui/icons-material'\r\nimport { Box, Card, CardHeader, Divider, IconButton, Stack, Typography } from '@mui/material'\r\nimport { motion } from 'framer-motion'\r\n\r\nimport { FundingGlobalCard } from './funding/FundingGlobalCard'\r\n\r\nimport { useToggleStatusCard } from '../../viabo-card/cards/hooks'\r\nimport { useMasterGlobalStore } from '../store'\r\n\r\nimport { getCardTypeByName } from '@/app/shared/services'\r\nimport { IOSSwitch } from '@/shared/components/form'\r\nimport { SpeiLogo } from '@/shared/components/images'\r\nimport { CircularLoading } from '@/shared/components/loadings'\r\nimport { copyToClipboard } from '@/shared/utils'\r\n\r\nconst MainCardDetails = ({ card, cardSelected, isRefetchingCards, commerceCards, disableFilter = false }) => {\r\n  const [copiedSPEI, setCopiedSPEI] = useState(false)\r\n  const [copiedCardNumber, setCopiedCardNumber] = useState(false)\r\n  const cardLogo = getCardTypeByName(card?.paymentProcessor)\r\n  const CardLogoComponent = cardLogo?.component\r\n  const selected = cardSelected?.id === card?.id\r\n  const { setGlobalCard, setIsMaster, setFilterPaymentProcessor } = useMasterGlobalStore(state => state)\r\n\r\n  const { mutate: changeStatusCard, isLoading: isChangingStatusCard } = useToggleStatusCard()\r\n  const [cardIdToggleStatus, setCardIdToggleStatus] = useState(null)\r\n\r\n  const commerceCardsByPaymentProcessor = useMemo(\r\n    () => (commerceCards && commerceCards[card?.paymentProcessorId]) || [],\r\n    [commerceCards]\r\n  )\r\n\r\n  const total = commerceCardsByPaymentProcessor?.length || 0\r\n\r\n  const handleSelectPaymentProcessor = card => e => {\r\n    if (disableFilter) {\r\n      return\r\n    }\r\n    setFilterPaymentProcessor(card?.paymentProcessor)\r\n    setIsMaster(false)\r\n    setGlobalCard(card)\r\n  }\r\n\r\n  const isChangingStatus = (isChangingStatusCard && cardIdToggleStatus === card?.id) || isRefetchingCards\r\n\r\n  return (\r\n    <Stack key={card?.cardId}>\r\n      <Card\r\n        sx={{\r\n          minWidth: { xs: 300, md: 'auto' },\r\n          border: selected ? 3 : 0,\r\n          borderColor: theme =>\r\n            selected\r\n              ? theme.palette.mode === 'dark'\r\n                ? theme.palette.secondary.main\r\n                : theme.palette.primary.main\r\n              : 'inherit'\r\n        }}\r\n      >\r\n        <CardHeader\r\n          title={\r\n            <Stack flexDirection={'row'} gap={1} alignItems={'center'} justifyContent={'space-between'}>\r\n              <Typography variant=\"caption\">{total === 0 ? '' : total + ' Tarjetas'}</Typography>\r\n\r\n              <Stack flexDirection=\"row\" alignItems=\"center\" sx={{ flexWrap: 'wrap' }} gap={0}>\r\n                {cardLogo && (\r\n                  <IconButton\r\n                    variant=\"outlined\"\r\n                    title={`Copiar Tarjeta - ${card?.cardNumber}`}\r\n                    color={copiedCardNumber ? 'success' : 'inherit'}\r\n                    onClick={e => {\r\n                      setCopiedCardNumber(true)\r\n                      copyToClipboard(card?.cardNumber)\r\n                      setTimeout(() => {\r\n                        setCopiedCardNumber(false)\r\n                      }, 1000)\r\n                    }}\r\n                    size=\"small\"\r\n                    sx={{ width: 40, height: 40 }}\r\n                  >\r\n                    {copiedCardNumber ? <Check sx={{ color: 'success' }} /> : <CardLogoComponent />}\r\n                  </IconButton>\r\n                )}\r\n                <IconButton\r\n                  variant=\"outlined\"\r\n                  title={`Copiar SPEI - ${card?.SPEI}`}\r\n                  color={copiedSPEI ? 'success' : 'inherit'}\r\n                  size=\"small\"\r\n                  onClick={e => {\r\n                    setCopiedSPEI(true)\r\n                    copyToClipboard(card?.SPEI)\r\n                    setTimeout(() => {\r\n                      setCopiedSPEI(false)\r\n                    }, 1000)\r\n                  }}\r\n                  sx={{ width: 40, height: 40 }}\r\n                >\r\n                  {copiedSPEI ? <Check sx={{ color: 'success' }} /> : <SpeiLogo />}\r\n                </IconButton>\r\n                <Stack ml={1}>\r\n                  {isChangingStatus ? (\r\n                    <CircularLoading\r\n                      size={15}\r\n                      containerProps={{\r\n                        display: 'flex',\r\n                        ml: 1\r\n                      }}\r\n                    />\r\n                  ) : (\r\n                    <IOSSwitch\r\n                      disabled={isChangingStatus}\r\n                      size=\"sm\"\r\n                      color={!card?.cardON ? 'error' : 'success'}\r\n                      checked={card?.cardON || false}\r\n                      inputProps={{ 'aria-label': 'controlled' }}\r\n                      onChange={() => {\r\n                        setCardIdToggleStatus(card?.id)\r\n                        changeStatusCard(\r\n                          { ...card, cardON: !card?.cardON },\r\n                          {\r\n                            onSuccess: () => {\r\n                              setCardIdToggleStatus(null)\r\n                            },\r\n                            onError: () => {\r\n                              setCardIdToggleStatus(null)\r\n                            }\r\n                          }\r\n                        )\r\n                      }}\r\n                    />\r\n                  )}\r\n                </Stack>\r\n              </Stack>\r\n            </Stack>\r\n          }\r\n          sx={{ px: 2, py: 2 }}\r\n        />\r\n        <Box\r\n          component={!disableFilter ? motion.div : 'div'}\r\n          onClick={handleSelectPaymentProcessor(card)}\r\n          {...(disableFilter\r\n            ? {}\r\n            : {\r\n                whileTap: { scale: 0.8 },\r\n                style: { cursor: 'pointer' }\r\n              })}\r\n        >\r\n          <Stack alignItems={'center'} pb={2} px={2}>\r\n            <Stack direction={'row'} alignItems={'center'} spacing={1}>\r\n              <Typography variant=\"h6\">{card?.balanceFormatted}</Typography>\r\n              <Typography variant=\"caption\">MXN</Typography>\r\n            </Stack>\r\n\r\n            <Stack direction={'row'} alignItems={'center'} spacing={1}>\r\n              <Update sx={{ width: 20, height: 20, color: 'text.secondary' }} />\r\n\r\n              <Stack alignItems={'center'}>\r\n                <Typography variant={'subtitle2'}>En transito</Typography>\r\n\r\n                <Stack direction={'row'} spacing={1} alignItems={'center'}>\r\n                  <Typography variant=\"body2\">{card?.inTransitFormatted}</Typography>\r\n                  <Typography variant=\"caption\">MXN</Typography>\r\n                </Stack>\r\n              </Stack>\r\n            </Stack>\r\n          </Stack>\r\n        </Box>\r\n\r\n        <Divider sx={{ borderStyle: 'dashed' }} />\r\n        <FundingGlobalCard\r\n          isRefetchingCards={isRefetchingCards}\r\n          commerceCards={commerceCardsByPaymentProcessor}\r\n          card={card}\r\n        />\r\n      </Card>\r\n    </Stack>\r\n  )\r\n}\r\n\r\nMainCardDetails.propTypes = {\r\n  card: PropTypes.shape({\r\n    SPEI: PropTypes.any,\r\n    balanceFormatted: PropTypes.any,\r\n    cardId: PropTypes.any,\r\n    id: PropTypes.any,\r\n    inTransitFormatted: PropTypes.any,\r\n    paymentProcessor: PropTypes.any,\r\n    paymentProcessorId: PropTypes.any,\r\n    cardNumber: PropTypes.any\r\n  }),\r\n  cardSelected: PropTypes.shape({\r\n    id: PropTypes.any\r\n  }),\r\n  commerceCards: PropTypes.any,\r\n  disableFilter: PropTypes.bool,\r\n  isRefetchingCards: PropTypes.any\r\n}\r\n\r\nexport default MainCardDetails\r\n","import { fCurrency, getDecryptInfo } from '@/shared/utils'\r\n\r\nconst PAYMENT_PROCESSORS = {\r\n  'MASTER CARD': '1',\r\n  MASTERCARD: '1',\r\n  CARNET: '2'\r\n}\r\n\r\nexport const GlobalCardsAdapter = cards => {\r\n  const decryptedCards = getDecryptInfo(cards?.ciphertext, cards?.iv)\r\n  let masterBalance = 0\r\n  let masterTransit = 0\r\n  const dataAdapted = decryptedCards?.map(card => {\r\n    masterBalance += parseFloat(card?.balance)\r\n    masterTransit += parseFloat(card?.inTransit)\r\n    return {\r\n      ...card,\r\n      paymentProcessorId: PAYMENT_PROCESSORS[card?.paymentProcessor?.toUpperCase()] ?? null,\r\n      id: card?.cardId,\r\n      SPEI: card?.spei,\r\n      balanceFormatted: fCurrency(card?.balance),\r\n      inTransitFormatted: fCurrency(card?.inTransit),\r\n      cardNumber: card?.cardNumber || '',\r\n      cardON: !(card?.block === 'Blocked')\r\n    }\r\n  })\r\n\r\n  return {\r\n    master: {\r\n      balance: masterBalance,\r\n      inTransit: masterTransit,\r\n      balanceFormatted: fCurrency(masterBalance),\r\n      inTransitFormatted: fCurrency(masterTransit)\r\n    },\r\n    globals: dataAdapted\r\n  }\r\n}\r\n","import { format } from 'date-fns'\r\nimport { es } from 'date-fns/locale'\r\n\r\nimport { fCurrency, fDateTime, getDecryptInfo } from '@/shared/utils'\r\n\r\nexport const MasterMovementsAdapter = movements => {\r\n  const decryptedMovements = getDecryptInfo(movements?.ciphertext, movements?.iv)\r\n\r\n  let expenses = 0\r\n  let income = 0\r\n  let expensesWithoutInvoice = 0\r\n  let expensesWithInvoice = 0\r\n  let expensesWithoutChecked = 0\r\n\r\n  return {\r\n    movements:\r\n      decryptedMovements?.map(movement => {\r\n        const amount = parseFloat(movement?.amount || '0')\r\n        if (movement?.type.toLowerCase() === 'gasto') {\r\n          expenses += amount\r\n        }\r\n        if (movement?.type.toLowerCase() === 'ingreso') {\r\n          income += amount\r\n        }\r\n\r\n        const expensesControlFiles = movement?.receiptFiles ? movement?.receiptFiles?.split(',') : []\r\n        const invoiceFiles = expensesControlFiles?.reduce(\r\n          (result, file) => {\r\n            if (file.endsWith('.xml')) {\r\n              result.xml = file\r\n            } else if (file.endsWith('.pdf')) {\r\n              result.pdf = file\r\n            }\r\n            return result\r\n          },\r\n          {\r\n            xml: null,\r\n            pdf: null\r\n          }\r\n        )\r\n        const isInvoice = Boolean(invoiceFiles?.xml !== null && invoiceFiles?.pdf !== null)\r\n\r\n        const date = movement?.date ? format(new Date(movement?.date), 'dd MMM yyyy', { locale: es }) : ''\r\n        const time = movement?.date ? format(new Date(movement?.date), 'p') : ''\r\n\r\n        const IS_OTHERS_CHARGES_TYPE = Boolean(movement?.operationType?.toLowerCase() === 'otros cargos')\r\n\r\n        if (IS_OTHERS_CHARGES_TYPE && Boolean(movement?.checked) && isInvoice) {\r\n          expensesWithInvoice += amount\r\n        }\r\n\r\n        if (IS_OTHERS_CHARGES_TYPE && Boolean(movement?.checked) && !isInvoice) {\r\n          expensesWithoutInvoice += amount\r\n        }\r\n\r\n        if (IS_OTHERS_CHARGES_TYPE && !movement?.checked) {\r\n          expensesWithoutChecked += amount\r\n        }\r\n\r\n        return {\r\n          id: movement?.transactionId,\r\n          fullDate: fDateTime(movement?.date),\r\n          date,\r\n          time,\r\n          serverDate: movement?.date,\r\n          description: movement?.description,\r\n          amount,\r\n          amountFormat: fCurrency(amount),\r\n          paymentProcessor: movement?.cardPaymentProcessor,\r\n          type: movement?.type.toLowerCase(),\r\n          operationType: movement?.operationType?.toUpperCase(),\r\n          concept: movement?.concept ?? '',\r\n          cardId: movement?.cardId,\r\n          commerceId: movement?.cardCommerceId,\r\n          verified: Boolean(movement?.checked),\r\n          isMainCard: Boolean(movement?.cardMain),\r\n          expensesControl: {\r\n            id: movement?.receiptId,\r\n            isInvoice,\r\n            invoiceFiles,\r\n            otherFiles: !isInvoice ? expensesControlFiles : []\r\n          },\r\n          original: movement\r\n        }\r\n      }) ?? [],\r\n    income: fCurrency(income),\r\n    expenses: fCurrency(expenses),\r\n    balanceMovements: fCurrency(income - expenses),\r\n    expensesWithInvoice: fCurrency(expensesWithInvoice),\r\n    expensesWithoutInvoice: fCurrency(expensesWithoutInvoice),\r\n    expensesWithoutChecked: fCurrency(expensesWithoutChecked),\r\n    totalExpensesOtherCharges: fCurrency(expensesWithInvoice + expensesWithoutInvoice + expensesWithoutChecked)\r\n  }\r\n}\r\n","import { GlobalCardsAdapter, MasterMovementsAdapter } from '@/app/business/dashboard-master/adapters'\r\nimport { CardsAdapter } from '@/app/shared/adapters'\r\nimport { axios } from '@/shared/interceptors'\r\n\r\nexport const getGlobalCards = async () => {\r\n  const { data } = await axios.get(`/api/main-cards/information`)\r\n  return GlobalCardsAdapter(data)\r\n}\r\n\r\nexport const getMasterMovements = async (initialDate, finalDate, signal) => {\r\n  const fetchURL = new URL('/api/master-cards/movements', window.location.origin)\r\n  fetchURL.searchParams.set('startDate', initialDate)\r\n  fetchURL.searchParams.set('endDate', finalDate)\r\n  const { data } = await axios.get(fetchURL.href)\r\n  return MasterMovementsAdapter(data)\r\n}\r\n\r\nexport const getCommerceCardsByPaymentProcessors = async paymentProcessors => {\r\n  const resultsByPaymentProcessorId = {}\r\n  const requests = paymentProcessors.map(paymentProcessorId =>\r\n    axios\r\n      .get(`/api/enabled-cards/commerce?paymentProcessorId=${paymentProcessorId}`)\r\n      .then(response => CardsAdapter(response.data))\r\n      .then(cards => {\r\n        // Almacena los resultados en el objeto resultsByPaymentProcessorId\r\n        resultsByPaymentProcessorId[paymentProcessorId] = cards\r\n      })\r\n  )\r\n  await Promise.all(requests)\r\n\r\n  return resultsByPaymentProcessorId\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { DASHBOARD_MASTER_KEYS } from '../adapters/dashboardMasterKeys'\r\nimport { getCommerceCardsByPaymentProcessors } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindCommerceCardsByPaymentProcessors = (paymentProcessors, options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const query = useQuery({\r\n    queryKey: [DASHBOARD_MASTER_KEYS.COMMERCE_CARDS],\r\n    queryFn: ({ signal }) => getCommerceCardsByPaymentProcessors(paymentProcessors, signal),\r\n    staleTime: 60000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener la lista de tarjetas del comercio. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(query.error)\r\n      })\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { DASHBOARD_MASTER_KEYS } from '@/app/business/dashboard-master/adapters/dashboardMasterKeys'\r\nimport { getGlobalCards } from '@/app/business/dashboard-master/services'\r\nimport { useCommerceDetailsCard } from '@/app/business/viabo-card/cards/store'\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindGlobalCards = (options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n  const setMainCard = useCommerceDetailsCard(state => state.setMainCard)\r\n  const commerces = useQuery([DASHBOARD_MASTER_KEYS.GLOBAL_CARDS], getGlobalCards, {\r\n    staleTime: 60000,\r\n    refetchOnWindowFocus: false,\r\n    onError: error => {\r\n      const errorMessage = getErrorAPI(error, 'No se puede obtener la información de las tarjetas principales')\r\n      setCustomError(errorMessage)\r\n      setMainCard(null)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(error)\r\n      })\r\n    },\r\n    onSuccess: data => {\r\n      setMainCard(data)\r\n    },\r\n    ...options\r\n  })\r\n  return {\r\n    ...commerces,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { endOfDay, format, startOfDay } from 'date-fns'\r\nimport { es } from 'date-fns/locale'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { DASHBOARD_MASTER_KEYS } from '@/app/business/dashboard-master/adapters/dashboardMasterKeys'\r\nimport { getMasterMovements } from '@/app/business/dashboard-master/services'\r\nimport { useMasterGlobalStore } from '@/app/business/dashboard-master/store'\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindMasterMovements = (startDate, endDate, options = {}) => {\r\n  if (!startDate || !endDate) {\r\n    return null\r\n  }\r\n  const initialDate = format(startOfDay(startDate), 'yyyy-MM-dd')\r\n  const finalDate = format(endOfDay(endDate), 'yyyy-MM-dd')\r\n  const [customError, setCustomError] = useState(null)\r\n  const { setMovements, setFilterDate } = useMasterGlobalStore(state => state)\r\n\r\n  const movements = useQuery(\r\n    [DASHBOARD_MASTER_KEYS.MOVEMENTS],\r\n    ({ signal }) => getMasterMovements(initialDate, finalDate, signal),\r\n    {\r\n      staleTime: 60000,\r\n      retry: false,\r\n      refetchOnWindowFocus: false,\r\n      onError: error => {\r\n        const errorMessage = getErrorAPI(\r\n          error,\r\n          'No se puede obtener la lista de movimientos. Intente nuevamente o reporte a sistemas'\r\n        )\r\n        setCustomError(errorMessage)\r\n        toast.error(errorMessage, {\r\n          type: getNotificationTypeByErrorCode(error)\r\n        })\r\n        setMovements(null)\r\n      },\r\n      onSuccess: data => {\r\n        setFilterDate({\r\n          startDate: startOfDay(startDate),\r\n          endDate: endOfDay(endDate),\r\n          text: `${format(startDate, 'dd MMMM yyyy', { locale: es })} - ${format(endDate, 'dd MMMM yyyy', {\r\n            locale: es\r\n          })}`\r\n        })\r\n      },\r\n      ...options\r\n    }\r\n  )\r\n  return {\r\n    ...movements,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { useMemo } from 'react'\r\n\r\nimport { Update } from '@mui/icons-material'\r\nimport { Card, CardHeader, Stack, Typography } from '@mui/material'\r\nimport { AnimatePresence, motion } from 'framer-motion'\r\n\r\nimport MainCardDetails from './MainCardDetails'\r\n\r\nimport { useFindCommerceCardsByPaymentProcessors, useFindGlobalCards } from '../hooks'\r\n\r\nimport { useMasterGlobalStore } from '@/app/business/dashboard-master/store'\r\nimport { RequestLoadingComponent } from '@/shared/components/loadings'\r\n\r\nexport function MasterGlobalCards() {\r\n  const { data, isLoading, isFetching: isFetchingGlobalCards } = useFindGlobalCards()\r\n\r\n  const cardSelected = useMasterGlobalStore(state => state.card)\r\n\r\n  const resetGlobalCard = useMasterGlobalStore(state => state.resetGlobalCard)\r\n  const setIsMaster = useMasterGlobalStore(state => state.setIsMaster)\r\n  const setFilterPaymentProcessor = useMasterGlobalStore(state => state.setFilterPaymentProcessor)\r\n  const isMaster = useMasterGlobalStore(state => state.isMaster)\r\n\r\n  const paymentProcessorsIds = useMemo(\r\n    () =>\r\n      data?.globals?.reduce((accumulator, processor) => {\r\n        accumulator.push(processor.paymentProcessorId)\r\n        return accumulator\r\n      }, []) || null,\r\n    [data?.globals]\r\n  )\r\n\r\n  const { data: commerceCards, isRefetching: isRefetchingCards } = useFindCommerceCardsByPaymentProcessors(\r\n    paymentProcessorsIds,\r\n    {\r\n      enabled: !!paymentProcessorsIds\r\n    }\r\n  )\r\n\r\n  const master = data?.master\r\n  const globals = data?.globals\r\n\r\n  const size = isLoading || globals?.length > 0\r\n\r\n  return (\r\n    <Stack minWidth={size ? 300 : 'auto'} mr={{ md: size ? 3 : 0 }} mb={{ xs: size ? 3 : 0, md: 0 }}>\r\n      <AnimatePresence>\r\n        <Stack spacing={2} flex={1}>\r\n          {isLoading && <RequestLoadingComponent sx={{ zIndex: 1 }} />}\r\n\r\n          {!isLoading && (\r\n            <>\r\n              {data?.globals?.length > 1 && (\r\n                <motion.div\r\n                  onClick={() => {\r\n                    setIsMaster(true)\r\n                    resetGlobalCard()\r\n                    setFilterPaymentProcessor(null)\r\n                  }}\r\n                  whileHover={{ scale: 1.03 }}\r\n                  whileTap={{ scale: 0.8 }}\r\n                >\r\n                  <Card\r\n                    sx={{\r\n                      p: 0,\r\n                      cursor: 'pointer',\r\n                      border: isMaster ? 3 : 0,\r\n                      borderColor: theme =>\r\n                        isMaster\r\n                          ? theme.palette.mode === 'dark'\r\n                            ? theme.palette.secondary.main\r\n                            : theme.palette.primary.main\r\n                          : 'inherit'\r\n                    }}\r\n                  >\r\n                    <CardHeader\r\n                      title={\r\n                        <Stack flexDirection={'row'} gap={1} alignItems={'center'}>\r\n                          <Typography variant=\"subtitle2\">Global [Master]</Typography>\r\n                        </Stack>\r\n                      }\r\n                      sx={{ px: 2, py: 2 }}\r\n                    />\r\n\r\n                    <Stack alignItems={'center'} pb={2} px={2}>\r\n                      <Stack direction={'row'} alignItems={'center'} spacing={1}>\r\n                        <Typography variant=\"h3\">{master?.balanceFormatted}</Typography>\r\n                        <Typography variant=\"caption\">MXN</Typography>\r\n                      </Stack>\r\n\r\n                      <Stack direction={'row'} alignItems={'center'} spacing={1}>\r\n                        <Update sx={{ width: 30, height: 30, color: 'text.secondary' }} />\r\n\r\n                        <Stack alignItems={'center'}>\r\n                          <Typography variant={'subtitle2'}>En transito</Typography>\r\n\r\n                          <Stack direction={'row'} spacing={1} alignItems={'center'}>\r\n                            <Typography variant=\"body1\">{master?.inTransitFormatted}</Typography>\r\n                            <Typography variant=\"caption\">MXN</Typography>\r\n                          </Stack>\r\n                        </Stack>\r\n                      </Stack>\r\n                    </Stack>\r\n                  </Card>\r\n                </motion.div>\r\n              )}\r\n\r\n              {globals?.map(card => (\r\n                <MainCardDetails\r\n                  key={card?.id}\r\n                  card={card}\r\n                  cardSelected={cardSelected}\r\n                  isRefetchingCards={isRefetchingCards || isFetchingGlobalCards}\r\n                  commerceCards={commerceCards}\r\n                  disableFilter={data?.globals?.length <= 1}\r\n                />\r\n              ))}\r\n            </>\r\n          )}\r\n        </Stack>\r\n      </AnimatePresence>\r\n    </Stack>\r\n  )\r\n}\r\n","import { lazy, useCallback, useEffect, useMemo, useState } from 'react'\r\n\r\nimport { Check } from '@mui/icons-material'\r\nimport { LoadingButton } from '@mui/lab'\r\nimport { Box, Card, MenuItem, Stack, Typography } from '@mui/material'\r\nimport { sub } from 'date-fns'\r\nimport { BiBlock } from 'react-icons/bi'\r\nimport { BsPatchCheck } from 'react-icons/bs'\r\nimport { LuReceipt } from 'react-icons/lu'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { useFindMasterMovements } from '@/app/business/dashboard-master/hooks'\r\nimport { useMasterGlobalStore } from '@/app/business/dashboard-master/store'\r\nimport { MovementDescriptionColumn } from '@/app/business/shared/components/card-movements/columns'\r\nimport { CardMovementsHeader } from '@/app/business/shared/components/card-movements/header-filter'\r\nimport { getOperationTypeByName } from '@/app/shared/services'\r\nimport { MaterialDataTable } from '@/shared/components/dataTables'\r\nimport { Lodable } from '@/shared/components/lodables'\r\nimport { useMaterialTable } from '@/shared/hooks'\r\nimport { fCurrency } from '@/shared/utils'\r\n\r\nconst VerifyExpensesDrawer = Lodable(\r\n  lazy(() => import('@/app/business/shared/components/card-movements/verify-expenses/VerifyExpensesDrawer'))\r\n)\r\n\r\nconst BalanceDrawer = Lodable(\r\n  lazy(() => import('@/app/business/shared/components/card-movements/balance/BalanceDrawer'))\r\n)\r\n\r\nexport function MasterMovements() {\r\n  const currentDate = new Date()\r\n  const filterPaymentProcessor = useMasterGlobalStore(state => state.filterPaymentProcessor)\r\n  const { setMovements, getBalance } = useMasterGlobalStore(state => state)\r\n  const filterDate = useMasterGlobalStore(state => state.filterDate)\r\n  const movements = useMasterGlobalStore(state => state.movements)\r\n\r\n  const initialStartDate = useMemo(\r\n    () => (filterDate?.startDate ? new Date(filterDate?.startDate) : sub(currentDate, { days: 30 })),\r\n    [filterDate?.startDate]\r\n  )\r\n  const initialEndDate = useMemo(\r\n    () => (filterDate?.endDate ? new Date(filterDate?.endDate) : currentDate),\r\n    [filterDate?.endDate]\r\n  )\r\n  const balance = useMemo(() => getBalance(), [movements])\r\n\r\n  const [startDate, setStartDate] = useState(initialStartDate)\r\n  const [endDate, setEndDate] = useState(initialEndDate)\r\n\r\n  const [openVerifyExpenses, setOpenVerifyExpenses] = useState(false)\r\n  const [openBalance, setOpenBalance] = useState(false)\r\n\r\n  const { data, isError, isLoading, isFetching, error, refetch } = useFindMasterMovements(startDate, endDate)\r\n\r\n  useEffect(() => {\r\n    if (startDate && endDate) {\r\n      refetch()\r\n    }\r\n  }, [startDate, endDate])\r\n\r\n  useEffect(() => {\r\n    if (filterPaymentProcessor) {\r\n      let expenses = 0\r\n      let income = 0\r\n      let expensesWithoutInvoice = 0\r\n      let expensesWithInvoice = 0\r\n      let expensesWithoutChecked = 0\r\n      const filterMovements = data?.movements?.filter(\r\n        movement => movement?.paymentProcessor?.toLowerCase() === filterPaymentProcessor?.toLowerCase()\r\n      )\r\n\r\n      filterMovements?.forEach(movement => {\r\n        movement?.type.toLowerCase() === 'gasto' ? (expenses += movement?.amount) : (income += movement?.amount)\r\n\r\n        const IS_OTHERS_CHARGES_TYPE = Boolean(movement?.operationType?.toLowerCase() === 'otros cargos')\r\n\r\n        if (IS_OTHERS_CHARGES_TYPE && Boolean(movement?.verified) && Boolean(movement?.expensesControl?.isInvoice)) {\r\n          expensesWithInvoice += movement?.amount\r\n        }\r\n\r\n        if (IS_OTHERS_CHARGES_TYPE && Boolean(movement?.verified) && !movement?.expensesControl?.isInvoice) {\r\n          expensesWithoutInvoice += movement?.amount\r\n        }\r\n\r\n        if (IS_OTHERS_CHARGES_TYPE && !movement?.verified) {\r\n          expensesWithoutChecked += movement?.amount\r\n        }\r\n      })\r\n      setMovements({\r\n        movements: filterMovements,\r\n        income: fCurrency(income),\r\n        expenses: fCurrency(expenses),\r\n        balanceMovements: fCurrency(income - expenses),\r\n        expensesWithInvoice: fCurrency(expensesWithInvoice),\r\n        expensesWithoutInvoice: fCurrency(expensesWithoutInvoice),\r\n        expensesWithoutChecked: fCurrency(expensesWithoutChecked),\r\n        totalExpensesOtherCharges: fCurrency(expensesWithInvoice + expensesWithoutInvoice + expensesWithoutChecked)\r\n      })\r\n    } else {\r\n      setMovements(data)\r\n    }\r\n  }, [filterPaymentProcessor, data])\r\n\r\n  const handleDateRange = range => {\r\n    const { startDate, endDate } = range\r\n    if (endDate !== null && startDate !== null) {\r\n      setEndDate(endDate)\r\n      setStartDate(startDate)\r\n    }\r\n  }\r\n\r\n  const handleValidateExpenses = table => () => {\r\n    const movements = table?.getSelectedRowModel().flatRows?.map(row => row.original) ?? []\r\n    const someHasVerified = movements?.some(movement => movement?.verified)\r\n    const someHasDifferentOperationType = movements?.some(movement => movement?.operationType !== 'OTROS CARGOS')\r\n    if (someHasVerified) {\r\n      return toast.warn(\r\n        'Existen movimientos que ya se encuentran comprobados, verifique los movimientos seleccionados.'\r\n      )\r\n    }\r\n    if (someHasDifferentOperationType) {\r\n      return toast.warn('Existen movimientos que no se pueden comprobar, verifique el tipo de movimiento.')\r\n    }\r\n    return setOpenVerifyExpenses(true)\r\n  }\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        accessorKey: 'description', // access nested data with dot notation\r\n        header: 'Movimiento',\r\n        enableHiding: false,\r\n        size: 200,\r\n        Cell: ({ cell, column, row }) => {\r\n          const { original: rowData } = row\r\n          return <MovementDescriptionColumn row={rowData} />\r\n        }\r\n      },\r\n      {\r\n        accessorKey: 'serverDate', // normal accessorKey\r\n        header: 'Fecha',\r\n        size: 120,\r\n        Cell: ({ cell, column, row }) => {\r\n          const { original: rowData } = row\r\n          return (\r\n            <Stack>\r\n              <Typography variant=\"subtitle2\">{rowData?.fullDate}</Typography>\r\n            </Stack>\r\n          )\r\n        }\r\n      },\r\n      {\r\n        accessorKey: 'operationType',\r\n        header: 'Tipo',\r\n        filterVariant: 'multi-select',\r\n        size: 100,\r\n        Cell: ({ cell, column, row }) => {\r\n          const { original: rowData } = row\r\n          const operationLogo = getOperationTypeByName(rowData?.operationType)\r\n          const OperationLogoComponent = operationLogo?.component\r\n          return (\r\n            <Box>\r\n              {operationLogo ? <OperationLogoComponent sx={{ width: 25, height: 25 }} /> : <LuReceipt size={22} />}\r\n            </Box>\r\n          )\r\n        }\r\n      },\r\n      {\r\n        accessorKey: 'amount',\r\n        header: 'Monto',\r\n        size: 100,\r\n        Cell: ({ cell, column, row }) => {\r\n          const { original: rowData } = row\r\n          const isIncome = rowData?.type === 'ingreso'\r\n          const isViaboPay = rowData?.type === 'terminal'\r\n          return (\r\n            <Typography variant=\"subtitle2\" fontWeight=\"bold\" color={isIncome || isViaboPay ? 'success.main' : 'error'}>\r\n              {isIncome || isViaboPay ? `+ ${rowData?.amountFormat}` : `- ${rowData?.amountFormat}`}\r\n            </Typography>\r\n          )\r\n        }\r\n      },\r\n      {\r\n        accessorKey: 'verified',\r\n        header: 'Comprobación',\r\n        size: 100,\r\n        Cell: ({ cell, column, row }) => {\r\n          const { original: rowData } = row\r\n          return (\r\n            <Stack\r\n              flexDirection={'row'}\r\n              width={1}\r\n              justifyContent={'center'}\r\n              alignItems={'center'}\r\n              gap={1}\r\n              mr={2}\r\n              color={'primary'}\r\n            >\r\n              {rowData?.verified ? (\r\n                <BsPatchCheck color=\"green\" fontWeight={'bold'} fontSize={'18px'} />\r\n              ) : (\r\n                <BiBlock fontSize={'18px'} color=\"red\" />\r\n              )}\r\n            </Stack>\r\n          )\r\n        }\r\n      }\r\n    ],\r\n    []\r\n  )\r\n\r\n  const table = useMaterialTable(isError, error, {\r\n    columns,\r\n    data: movements || [],\r\n    enableColumnPinning: true,\r\n    enableColumnFilterModes: true,\r\n    enableStickyHeader: true,\r\n    enableRowVirtualization: true,\r\n    enableFacetedValues: true,\r\n    enableRowActions: true,\r\n    enableRowSelection: true,\r\n    enableDensityToggle: false,\r\n    positionActionsColumn: 'last',\r\n    selectAllMode: 'all',\r\n    initialState: {\r\n      density: 'compact',\r\n      sorting: [\r\n        {\r\n          id: 'serverDate',\r\n          desc: true\r\n        }\r\n      ]\r\n    },\r\n    state: {\r\n      isLoading,\r\n      showAlertBanner: isError,\r\n      showProgressBars: isFetching\r\n    },\r\n    displayColumnDefOptions: {\r\n      'mrt-row-select': {\r\n        maxSize: 10\r\n      },\r\n      'mrt-row-actions': {\r\n        header: 'Acciones',\r\n        maxSize: 80\r\n      }\r\n    },\r\n    muiTableContainerProps: { sx: { maxHeight: { md: '350px', lg: '450px', xl: '700px' } } },\r\n    renderTopToolbarCustomActions: ({ table }) => (\r\n      <Box sx={{ display: 'flex', gap: '1rem' }}>\r\n        <LoadingButton\r\n          loading={isFetching}\r\n          onClick={handleValidateExpenses(table)}\r\n          disabled={handleValidateSamePaymentProcessor()}\r\n          startIcon={<Check width={24} height={24} />}\r\n          variant=\"outlined\"\r\n        >\r\n          Comprobar\r\n        </LoadingButton>\r\n      </Box>\r\n    ),\r\n    renderRowActionMenuItems: ({ row }) => [\r\n      <MenuItem key=\"conciliation\" onClick={() => console.info('conciliation')}>\r\n        Conciliación\r\n      </MenuItem>,\r\n      <MenuItem key=\"incidence\" onClick={() => console.info('incidence')}>\r\n        Incidencia\r\n      </MenuItem>,\r\n      <MenuItem key=\"communication\" onClick={() => console.info('communication')}>\r\n        Comunicación\r\n      </MenuItem>,\r\n      <MenuItem key=\"tag\" onClick={() => console.info('tag')}>\r\n        Tag\r\n      </MenuItem>\r\n    ]\r\n  })\r\n\r\n  const selectedMovements = table?.getSelectedRowModel().flatRows?.map(row => row.original) ?? []\r\n\r\n  const handleValidateSamePaymentProcessor = useCallback(() => {\r\n    const firstPaymentProcessor = selectedMovements.length > 0 ? selectedMovements[0]?.paymentProcessor : null\r\n\r\n    const result = Boolean(\r\n      selectedMovements.every(obj => obj.paymentProcessor === firstPaymentProcessor) && table?.getIsSomeRowsSelected()\r\n    )\r\n    return !result\r\n  }, [selectedMovements, table])\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardMovementsHeader\r\n          startDate={startDate}\r\n          endDate={endDate}\r\n          onChangeDateRange={handleDateRange}\r\n          onOpenBalance={() => setOpenBalance(true)}\r\n          loading={isFetching}\r\n        />\r\n\r\n        <MaterialDataTable table={table} />\r\n      </Card>\r\n      <VerifyExpensesDrawer\r\n        open={openVerifyExpenses}\r\n        setOpen={setOpenVerifyExpenses}\r\n        movements={selectedMovements ?? []}\r\n      />\r\n      <BalanceDrawer\r\n        open={openBalance}\r\n        card={balance}\r\n        dateRange={filterDate?.text}\r\n        onClose={() => {\r\n          setOpenBalance(false)\r\n        }}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import { Box, Stack } from '@mui/material'\r\n\r\nimport { MasterGlobalCards } from '@/app/business/dashboard-master/components'\r\nimport { MasterMovements } from '@/app/business/dashboard-master/components/movements/MasterMovements'\r\nimport { FundingOrder } from '@/app/business/viabo-card/cards/components/toolbar-actions'\r\nimport { PATH_DASHBOARD } from '@/routes'\r\nimport { Page } from '@/shared/components/containers'\r\nimport { ContainerPage } from '@/shared/components/containers/ContainerPage'\r\nimport { HeaderPage } from '@/shared/components/layout'\r\n\r\nexport default function DashboardMaster() {\r\n  return (\r\n    <Page title=\"Dashboard Master\">\r\n      <ContainerPage>\r\n        <HeaderPage\r\n          name={'Dashboard Master'}\r\n          links={[{ name: 'Inicio', href: PATH_DASHBOARD.root }, { name: 'Dashboard Master' }]}\r\n        />\r\n        <Box pb={4}>\r\n          <Stack flexDirection={{ md: 'row' }}>\r\n            <MasterGlobalCards />\r\n            <Stack flex={1}>\r\n              <MasterMovements />\r\n            </Stack>\r\n          </Stack>\r\n        </Box>\r\n\r\n        <FundingOrder />\r\n      </ContainerPage>\r\n    </Page>\r\n  )\r\n}\r\n"],"file":"assets/js/DashboardMaster-ChI-bzoV.js"}