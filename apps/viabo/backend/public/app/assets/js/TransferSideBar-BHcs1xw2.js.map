{"version":3,"mappings":"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","names":["TransactionForm","Lodable","lazy","ResumeTransactionForm","TransferToGlobalForm","TransferSideBar","open","setOpen","isFundingCard","user","useUser","card","useCommerceDetailsCard","state","mainCard","cardList","useGetQueryData","CARDS_COMMERCES_KEYS","CARDS_COMMERCE_LIST","cardTypeId","currentBalance","setCurrentBalance","useState","balance","useMemo","view","setView","showResume","setShowResume","transactionData","setTransactionData","transactionLoading","setTransactionLoading","insufficient","parseFloat","toFixed","isLegalRepresentative","profile","toLowerCase","filterCards","filter","commerceCard","id","handleClose","handleChangeView","event","newValue","useEffect","handleSuccessForm","values","isGlobal","cardOriginId","transactions","concept","handleBackResume","titleTransaction","jsx","Typography","jsxs","Box","Stack","cardNumberMoreDigits","Label","assignUser","name","renderContentTransaction","Fragment","py","px","ToggleButtonGroup","ToggleButton","fCurrency","RightPanel","motion","opacity","duration","display","flex","overflow","flexDirection","propTypes","PropTypes","bool","func"],"sources":["../../../../../frontend/src/app/business/viabo-card/cards/components/transfer/TransferSideBar.jsx"],"sourcesContent":["import { lazy, useEffect, useMemo, useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Box, Stack, ToggleButton, ToggleButtonGroup, Typography } from '@mui/material'\r\nimport { motion } from 'framer-motion'\r\n\r\nimport { CARDS_COMMERCES_KEYS } from '@/app/business/viabo-card/cards/adapters'\r\nimport { useCommerceDetailsCard } from '@/app/business/viabo-card/cards/store'\r\nimport { RightPanel } from '@/app/shared/components'\r\nimport { Label } from '@/shared/components/form'\r\nimport { Lodable } from '@/shared/components/lodables'\r\nimport { useGetQueryData, useUser } from '@/shared/hooks'\r\nimport { fCurrency } from '@/shared/utils'\r\n\r\nconst TransactionForm = Lodable(lazy(() => import('./TransactionForm')))\r\nconst ResumeTransactionForm = Lodable(lazy(() => import('./ResumeTransactionForm')))\r\nconst TransferToGlobalForm = Lodable(lazy(() => import('./TransferToGlobalForm')))\r\n\r\nexport default function TransferSideBar({ open, setOpen, isFundingCard }) {\r\n  const user = useUser()\r\n  const card = useCommerceDetailsCard(state => state.card)\r\n  const mainCard = useCommerceDetailsCard(state => state.mainCard)\r\n\r\n  const cardList = useGetQueryData([CARDS_COMMERCES_KEYS.CARDS_COMMERCE_LIST, card?.cardTypeId]) || []\r\n  const [currentBalance, setCurrentBalance] = useState(0)\r\n  const balance = useMemo(() => (isFundingCard ? mainCard?.balance : card?.balance), [mainCard?.balance, card?.balance])\r\n  const [view, setView] = useState('1')\r\n  const [showResume, setShowResume] = useState(false)\r\n  const [transactionData, setTransactionData] = useState(null)\r\n  const [transactionLoading, setTransactionLoading] = useState(false)\r\n\r\n  const insufficient = useMemo(\r\n    () => Boolean((parseFloat(balance) - currentBalance).toFixed(2) < 0),\r\n    [currentBalance, balance]\r\n  )\r\n  const isLegalRepresentative = useMemo(() => user?.profile?.toLowerCase() === 'representante legal', [user])\r\n\r\n  const filterCards = useMemo(\r\n    () => cardList?.filter(commerceCard => commerceCard.id !== card?.id),\r\n    [cardList, card?.id]\r\n  )\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n    setCurrentBalance(0)\r\n    setShowResume(false)\r\n    setTransactionData(null)\r\n    setTransactionLoading(false)\r\n  }\r\n\r\n  const handleChangeView = (event, newValue) => {\r\n    if (newValue) {\r\n      setView(newValue)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setCurrentBalance(0)\r\n  }, [view])\r\n\r\n  const handleSuccessForm = values => {\r\n    const isGlobal = view === '2'\r\n    let cardOriginId = isFundingCard ? mainCard?.id : card?.id\r\n    isGlobal && (cardOriginId = card?.id)\r\n\r\n    setTransactionData({\r\n      cardOriginId,\r\n      isGlobal,\r\n      transactions: isGlobal ? values : values?.transactions || [],\r\n      concept: values?.concept,\r\n      balance,\r\n      currentBalance\r\n    })\r\n    setShowResume(true)\r\n  }\r\n\r\n  const handleBackResume = () => {\r\n    setShowResume(false)\r\n  }\r\n\r\n  const titleTransaction = (\r\n    <>\r\n      {isFundingCard ? (\r\n        <Typography variant=\"h6\">Fondear</Typography>\r\n      ) : (\r\n        <Box>\r\n          <Stack spacing={1} alignItems={'center'} direction={'row'} mb={0.5}>\r\n            <Typography variant=\"subtitle2\">Origen: </Typography>\r\n            <Typography variant=\"subtitle2\">{card?.cardNumberMoreDigits} </Typography>\r\n          </Stack>\r\n          <Label color={'info'}>{card?.assignUser?.name}</Label>\r\n        </Box>\r\n      )}\r\n    </>\r\n  )\r\n\r\n  const renderContentTransaction = (\r\n    <>\r\n      {!isFundingCard && isLegalRepresentative && (\r\n        <Stack alignItems={'flex-end'} sx={{ py: 1, px: 3 }}>\r\n          <ToggleButtonGroup\r\n            size={'small'}\r\n            color=\"primary\"\r\n            value={view}\r\n            exclusive\r\n            onChange={handleChangeView}\r\n            aria-label=\"Platform\"\r\n            disabled={transactionLoading}\r\n          >\r\n            <ToggleButton value=\"1\">Tarjetas</ToggleButton>\r\n            <ToggleButton value=\"2\">Global</ToggleButton>\r\n          </ToggleButtonGroup>\r\n        </Stack>\r\n      )}\r\n\r\n      <Stack\r\n        flexDirection=\"column\"\r\n        alignItems={'center'}\r\n        justifyContent={'space-between'}\r\n        spacing={0}\r\n        px={3}\r\n        pt={isFundingCard ? 2 : 1}\r\n      >\r\n        <Typography variant=\"subtitle1\">Saldo</Typography>\r\n        <Stack direction={'row'} spacing={1} alignItems={'center'}>\r\n          <Typography variant=\"h3\" color={'success.main'}>\r\n            {fCurrency(balance)}\r\n          </Typography>\r\n          <Typography variant=\"caption\" color={'success.main'}>\r\n            MXN\r\n          </Typography>\r\n        </Stack>\r\n        <Stack direction={'row'} spacing={1} alignItems={'center'}>\r\n          <Typography variant=\"subtitle1\" color={'error'}>\r\n            - {fCurrency(currentBalance)}\r\n          </Typography>\r\n          <Typography variant=\"caption\" color={'error'}>\r\n            MXN\r\n          </Typography>\r\n        </Stack>\r\n        {insufficient && (\r\n          <Typography variant=\"caption\" color={'warning.main'} textAlign={'center'}>\r\n            Saldo insuficiente para realizar la(s) operacion(es)\r\n          </Typography>\r\n        )}\r\n      </Stack>\r\n\r\n      {isFundingCard && (\r\n        <TransactionForm\r\n          cards={isFundingCard ? cardList : filterCards}\r\n          setCurrentBalance={setCurrentBalance}\r\n          insufficient={insufficient}\r\n          isBinCard={isFundingCard}\r\n          onSuccess={handleSuccessForm}\r\n        />\r\n      )}\r\n\r\n      {!isFundingCard && isLegalRepresentative && (\r\n        <>\r\n          {view === '1' && (\r\n            <TransactionForm\r\n              cards={isFundingCard ? cardList : filterCards}\r\n              setCurrentBalance={setCurrentBalance}\r\n              insufficient={insufficient}\r\n              isBinCard={isFundingCard}\r\n              onSuccess={handleSuccessForm}\r\n            />\r\n          )}\r\n          {view === '2' && (\r\n            <TransferToGlobalForm\r\n              mainCard={mainCard}\r\n              setCurrentBalance={setCurrentBalance}\r\n              insufficient={insufficient}\r\n              onSuccess={handleSuccessForm}\r\n            />\r\n          )}\r\n        </>\r\n      )}\r\n\r\n      {!isFundingCard && !isLegalRepresentative && (\r\n        <TransactionForm\r\n          cards={isFundingCard ? cardList : filterCards}\r\n          setCurrentBalance={setCurrentBalance}\r\n          insufficient={insufficient}\r\n          isBinCard={isFundingCard}\r\n          onSuccess={handleSuccessForm}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n\r\n  return (\r\n    <RightPanel open={open} handleClose={handleClose} titleElement={titleTransaction}>\r\n      <motion.div\r\n        initial={{ opacity: 1 }}\r\n        animate={{ opacity: showResume ? 0 : 1 }}\r\n        transition={{ duration: 0.5 }}\r\n        style={{\r\n          display: showResume ? 'none' : 'flex',\r\n          flex: 1,\r\n          overflow: 'hidden',\r\n          flexDirection: 'column'\r\n        }}\r\n      >\r\n        {renderContentTransaction}\r\n      </motion.div>\r\n      <motion.div\r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: showResume ? 1 : 0 }}\r\n        transition={{ duration: 0.5 }}\r\n        style={{\r\n          display: showResume ? 'flex' : 'none',\r\n          flexDirection: 'column',\r\n          flex: 1,\r\n          overflow: 'hidden'\r\n        }}\r\n      >\r\n        <ResumeTransactionForm\r\n          data={transactionData}\r\n          onBack={handleBackResume}\r\n          setTransactionLoading={setTransactionLoading}\r\n          transactionLoading={transactionLoading}\r\n          onClose={handleClose}\r\n        />\r\n      </motion.div>\r\n    </RightPanel>\r\n  )\r\n}\r\n\r\nTransferSideBar.propTypes = {\r\n  isFundingCard: PropTypes.bool,\r\n  open: PropTypes.bool,\r\n  setOpen: PropTypes.func\r\n}\r\n"],"file":"assets/js/TransferSideBar-BHcs1xw2.js"}