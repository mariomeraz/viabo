{"version":3,"mappings":"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","names":["EXPENSES_CONTROL_KEYS","getExpensesMovementsCommerceCards","startDate","endDate","signal","fetchURL","filters","filter","index","key","value","data","axios","CardMovementsAdapter","useFindExpensesMovementsFromCommerceCards","options","initialDate","format","startOfDay","finalDate","endOfDay","customError","setCustomError","useState","query","useQuery","useEffect","errorMessage","getErrorAPI","toast","getNotificationTypeByErrorCode","BalanceDrawer","Lodable","lazy","__vitePreload","ExpensesTable","currentDate","Date","initialStartDate","sub","days","initialEndDate","setStartDate","setEndDate","openBalance","setOpenBalance","isError","isLoading","isFetching","error","refetch","filterDate","useMemo","text","locale","es","handleDownloadAllFiles","expensesControl","otherFiles","forEach","fileURL","window","open","focus","columns","accessorKey","header","enableHiding","size","Cell","cell","column","row","original","rowData","isMainCard","cardLogo","getCardTypeByName","paymentProcessor","CardLogoComponent","component","Stack","jsx","width","height","Typography","cardNumber","substr","length","filterVariant","ownerCard","minSize","description","fullDate","isIncome","type","isViaboPay","amountFormat","verified","BsPatchCheck","BiBlock","enableFilters","enableColumnFilter","jsxs","isInvoice","IconButton","Link","invoiceFiles","pdf","BsFiletypePdf","xml","BsFiletypeXml","PiFilesBold","handleDateRange","range","Fragment","Card","CardMovementsHeader","MaterialDataTable","movements","density","sorting","id","desc","showAlertBanner","showProgressBars","sx","theme","backgroundColor","palette","background","paper","action","selected","hover","maxHeight","md","lg","xl","ExpensesControl","Page","ContainerPage","HeaderPage","name","href","PATH_DASHBOARD","root"],"sources":["../../../../../frontend/src/app/business/expenses-control/adapters/expenses-control-keys.js","../../../../../frontend/src/app/business/expenses-control/services/ExpensesControlRepository.js","../../../../../frontend/src/app/business/expenses-control/hooks/useFindExpensesMovementsFromCommerceCards.js","../../../../../frontend/src/app/business/expenses-control/components/ExpensesTable.jsx","../../../../../frontend/src/app/business/expenses-control/pages/ExpensesControl.jsx"],"sourcesContent":["export const EXPENSES_CONTROL_KEYS = {\r\n  MOVEMENTS: 'expenses-card-movements-commerce'\r\n}\r\n","import { CardMovementsAdapter } from '@/app/shared/adapters'\r\nimport { axios } from '@/shared/interceptors'\r\n\r\nexport const getExpensesMovementsCommerceCards = async (startDate, endDate, signal) => {\r\n  const fetchURL = new URL('/api/cards/movements/commerce', window.location.origin)\r\n\r\n  const filters = [\r\n    { field: 'date', operator: '>=', value: startDate },\r\n    { field: 'date', operator: '<=', value: endDate },\r\n    { field: 'operationType', operator: '=', value: 'OTROS CARGOS' }\r\n  ]\r\n\r\n  filters?.forEach((filter, index) => {\r\n    Object.entries(filter).forEach(([key, value]) => {\r\n      fetchURL.searchParams.set(`filters[${index}][${key}]`, value)\r\n    })\r\n  })\r\n  const { data } = await axios.get(fetchURL.href, {\r\n    signal\r\n  })\r\n  return CardMovementsAdapter(data)\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { endOfDay, format, startOfDay } from 'date-fns'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { EXPENSES_CONTROL_KEYS } from '../adapters'\r\nimport { getExpensesMovementsCommerceCards } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindExpensesMovementsFromCommerceCards = (startDate, endDate, options = {}) => {\r\n  if (!startDate || !endDate) {\r\n    return null\r\n  }\r\n  const initialDate = format(startOfDay(startDate), 'yyyy-MM-dd HH:mm:ss')\r\n  const finalDate = format(endOfDay(endDate), 'yyyy-MM-dd HH:mm:ss')\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const query = useQuery({\r\n    queryKey: [EXPENSES_CONTROL_KEYS.MOVEMENTS],\r\n    queryFn: ({ signal }) => getExpensesMovementsCommerceCards(initialDate, finalDate, signal),\r\n    refetchOnWindowFocus: false,\r\n    retry: false,\r\n    staleTime: 300000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener la lista de movimientos. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(query.error)\r\n      })\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { lazy, useEffect, useMemo, useState } from 'react'\r\n\r\nimport { Card, IconButton, Link, Stack, Typography } from '@mui/material'\r\nimport { endOfDay, format, startOfDay, sub } from 'date-fns'\r\nimport { es } from 'date-fns/locale'\r\nimport { BiBlock } from 'react-icons/bi'\r\nimport { BsFiletypePdf, BsFiletypeXml, BsPatchCheck } from 'react-icons/bs'\r\nimport { PiFilesBold } from 'react-icons/pi'\r\n\r\nimport { CardMovementsHeader } from '../../shared/components/card-movements/header-filter'\r\nimport { useFindExpensesMovementsFromCommerceCards } from '../hooks'\r\n\r\nimport { getCardTypeByName } from '@/app/shared/services'\r\nimport { MaterialDataTable } from '@/shared/components/dataTables'\r\nimport { Lodable } from '@/shared/components/lodables'\r\n\r\nconst BalanceDrawer = Lodable(\r\n  lazy(() => import('@/app/business/shared/components/card-movements/balance/BalanceDrawer'))\r\n)\r\n\r\nexport const ExpensesTable = () => {\r\n  const currentDate = new Date()\r\n\r\n  const initialStartDate = sub(currentDate, { days: 30 })\r\n  const initialEndDate = currentDate\r\n  const [startDate, setStartDate] = useState(initialStartDate)\r\n  const [endDate, setEndDate] = useState(initialEndDate)\r\n  const [openBalance, setOpenBalance] = useState(false)\r\n\r\n  const { data, isError, isLoading, isFetching, error, refetch } = useFindExpensesMovementsFromCommerceCards(\r\n    startDate,\r\n    endDate\r\n  )\r\n\r\n  const filterDate = useMemo(\r\n    () => ({\r\n      startDate: startOfDay(startDate),\r\n      endDate: endOfDay(endDate),\r\n      text: `${format(startDate, 'dd MMMM yyyy', { locale: es })} - ${format(endDate, 'dd MMMM yyyy', {\r\n        locale: es\r\n      })}`\r\n    }),\r\n    [startDate, endDate]\r\n  )\r\n\r\n  const handleDownloadAllFiles = row => () => {\r\n    row?.expensesControl?.otherFiles?.forEach(fileURL => {\r\n      window.open(fileURL, '_blank').focus()\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (startDate && endDate) {\r\n      refetch()\r\n    }\r\n  }, [startDate, endDate])\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        accessorKey: 'cardNumber', // access nested data with dot notation\r\n        header: 'Tarjeta',\r\n        enableHiding: false,\r\n        size: 150,\r\n        Cell: ({ cell, column, row }) => {\r\n          const { original: rowData } = row\r\n          const isMainCard = rowData?.isMainCard\r\n\r\n          const cardLogo = getCardTypeByName(rowData?.paymentProcessor)\r\n          const CardLogoComponent = cardLogo?.component\r\n          return (\r\n            <Stack direction={'row'} spacing={1} alignItems={'center'}>\r\n              {cardLogo && <CardLogoComponent sx={{ width: 30, height: 30 }} />}\r\n              <Typography variant=\"subtitle2\" fontWeight=\"bold\" noWrap>\r\n                {isMainCard ? rowData?.cardNumber : rowData?.cardNumber?.substr(rowData?.cardNumber?.length - 4)}\r\n              </Typography>\r\n            </Stack>\r\n          )\r\n        }\r\n      },\r\n      {\r\n        accessorKey: 'ownerCard', // normal accessorKey\r\n        header: 'Tarjetahabiente',\r\n        filterVariant: 'multi-select',\r\n        size: 150,\r\n        Cell: ({ cell, column, row }) => {\r\n          const { original: rowData } = row\r\n          return (\r\n            <Stack>\r\n              <Typography variant=\"subtitle2\">{rowData?.ownerCard}</Typography>\r\n            </Stack>\r\n          )\r\n        }\r\n      },\r\n      {\r\n        accessorKey: 'description',\r\n        header: 'Movimiento',\r\n        minSize: 120,\r\n        Cell: ({ cell, column, row }) => {\r\n          const { original: rowData } = row\r\n          return (\r\n            <Stack>\r\n              <Typography variant=\"subtitle2\">{rowData?.description}</Typography>\r\n            </Stack>\r\n          )\r\n        }\r\n      },\r\n      {\r\n        accessorKey: 'fullDate', // normal accessorKey\r\n        header: 'Fecha',\r\n        size: 120,\r\n        Cell: ({ cell, column, row }) => {\r\n          const { original: rowData } = row\r\n          return (\r\n            <Stack>\r\n              <Typography variant=\"subtitle2\">{rowData?.fullDate}</Typography>\r\n            </Stack>\r\n          )\r\n        }\r\n      },\r\n      {\r\n        accessorKey: 'amount',\r\n        header: 'Monto',\r\n        size: 100,\r\n        Cell: ({ cell, column, row }) => {\r\n          const { original: rowData } = row\r\n          const isIncome = rowData?.type === 'ingreso'\r\n          const isViaboPay = rowData?.type === 'terminal'\r\n          return (\r\n            <Typography variant=\"subtitle2\" fontWeight=\"bold\" color={isIncome || isViaboPay ? 'success.main' : 'error'}>\r\n              {isIncome || isViaboPay ? `+ ${rowData?.amountFormat}` : `- ${rowData?.amountFormat}`}\r\n            </Typography>\r\n          )\r\n        }\r\n      },\r\n      {\r\n        accessorKey: 'verified',\r\n        header: 'Comprobación',\r\n        size: 100,\r\n        Cell: ({ cell, column, row }) => {\r\n          const { original: rowData } = row\r\n          return (\r\n            <Stack\r\n              flexDirection={'row'}\r\n              width={1}\r\n              justifyContent={'center'}\r\n              alignItems={'center'}\r\n              gap={1}\r\n              mr={2}\r\n              color={'primary'}\r\n            >\r\n              {rowData?.verified ? (\r\n                <BsPatchCheck color=\"green\" fontWeight={'bold'} fontSize={'18px'} />\r\n              ) : (\r\n                <BiBlock fontSize={'18px'} color=\"red\" />\r\n              )}\r\n            </Stack>\r\n          )\r\n        }\r\n      },\r\n      {\r\n        accessorKey: 'files',\r\n        header: 'Archivos',\r\n        size: 100,\r\n        enableFilters: false,\r\n        enableColumnFilter: false,\r\n        Cell: ({ cell, column, row }) => {\r\n          const { original: rowData } = row\r\n          return (\r\n            <Stack flexDirection={'row'} color={'primary'}>\r\n              {rowData?.expensesControl?.isInvoice && (\r\n                <Stack direction={'row'} spacing={0.5}>\r\n                  <IconButton\r\n                    title=\"Descargar PDF\"\r\n                    LinkComponent={Link}\r\n                    href={rowData?.expensesControl?.invoiceFiles?.pdf}\r\n                    target=\"_blank\"\r\n                    color={'error'}\r\n                  >\r\n                    <BsFiletypePdf fontSize={'18px'} />\r\n                  </IconButton>\r\n                  <IconButton\r\n                    title=\"Descargar XML\"\r\n                    LinkComponent={Link}\r\n                    href={rowData?.expensesControl?.invoiceFiles?.xml}\r\n                    target=\"_blank\"\r\n                    color=\"info\"\r\n                  >\r\n                    <BsFiletypeXml fontSize={'18px'} />\r\n                  </IconButton>\r\n                </Stack>\r\n              )}\r\n\r\n              {!rowData?.expensesControl?.isInvoice && rowData?.expensesControl?.otherFiles?.length > 0 && (\r\n                <IconButton color={'primary'} title=\"Descargar Archivos\" onClick={handleDownloadAllFiles(rowData)}>\r\n                  <PiFilesBold fontSize={'20px'} />\r\n                </IconButton>\r\n              )}\r\n            </Stack>\r\n          )\r\n        }\r\n      }\r\n    ],\r\n    []\r\n  )\r\n\r\n  const handleDateRange = range => {\r\n    const { startDate, endDate } = range\r\n    if (endDate !== null && startDate !== null) {\r\n      setEndDate(endDate)\r\n      setStartDate(startDate)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardMovementsHeader\r\n          startDate={startDate}\r\n          endDate={endDate}\r\n          onChangeDateRange={handleDateRange}\r\n          onOpenBalance={() => setOpenBalance(true)}\r\n          loading={isFetching}\r\n        />\r\n\r\n        <MaterialDataTable\r\n          enableColumnPinning\r\n          enableStickyHeader\r\n          enableRowVirtualization\r\n          enableFacetedValues\r\n          enableRowSelection\r\n          positionActionsColumn=\"last\"\r\n          enableDensityToggle={false}\r\n          columns={columns}\r\n          data={data?.movements || []}\r\n          isError={isError}\r\n          textError={error}\r\n          selectAllMode={'all'}\r\n          initialState={{\r\n            density: 'compact',\r\n            sorting: [\r\n              {\r\n                id: 'fullDate',\r\n                desc: true\r\n              }\r\n            ]\r\n          }}\r\n          state={{\r\n            isLoading,\r\n            showAlertBanner: isError,\r\n            showProgressBars: isFetching\r\n          }}\r\n          displayColumnDefOptions={{\r\n            'mrt-row-actions': {\r\n              header: 'Acciones', // change header text\r\n              size: 80 // make actions column wider\r\n            },\r\n            'mrt-row-select': {\r\n              size: 10\r\n            }\r\n          }}\r\n          muiTableBodyRowProps={({ row }) => ({\r\n            sx: theme => ({\r\n              backgroundColor: theme.palette.background.paper,\r\n              '&.Mui-selected': {\r\n                backgroundColor: theme.palette.action.selected,\r\n                '&:hover': {\r\n                  backgroundColor: theme.palette.action.hover\r\n                }\r\n              }\r\n            })\r\n          })}\r\n          muiTableContainerProps={{ sx: { maxHeight: { md: '350px', lg: '450px', xl: '700px' } } }}\r\n        />\r\n      </Card>\r\n\r\n      <BalanceDrawer\r\n        open={openBalance}\r\n        card={data}\r\n        dateRange={filterDate?.text}\r\n        onClose={() => {\r\n          setOpenBalance(false)\r\n        }}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import { ExpensesTable } from '../components'\r\n\r\nimport { PATH_DASHBOARD } from '@/routes'\r\nimport { Page } from '@/shared/components/containers'\r\nimport { ContainerPage } from '@/shared/components/containers/ContainerPage'\r\nimport { HeaderPage } from '@/shared/components/layout'\r\n\r\nconst ExpensesControl = () => (\r\n  <Page title=\"Comprobaciones\">\r\n    <ContainerPage>\r\n      <HeaderPage\r\n        name={'Comprobaciones'}\r\n        links={[{ name: 'Inicio', href: PATH_DASHBOARD.root }, { name: 'Comprobaciones' }]}\r\n      />\r\n      <ExpensesTable />\r\n    </ContainerPage>\r\n  </Page>\r\n)\r\n\r\nexport default ExpensesControl\r\n"],"file":"assets/js/ExpensesControl-CiVAIo6a.js"}