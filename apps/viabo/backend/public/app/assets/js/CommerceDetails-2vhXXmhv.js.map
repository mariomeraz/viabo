{"version":3,"mappings":"m0BAUO,MAAMA,EAAyB,CAACC,EAAYC,EAAU,KAAO,CAClE,KAAM,CAACC,EAAaC,CAAc,EAAIC,WAAS,IAAI,EAE7CC,EAAQC,EAAS,CACrB,SAAU,CAACC,EAA0B,iBAAkBP,CAAU,EACjE,QAAS,CAAC,CAAE,OAAAQ,KAAaC,EAAmBT,CAAU,EACtD,qBAAsB,GACtB,MAAO,GACP,UAAW,IACX,GAAGC,CACP,CAAG,EAEDS,mBAAU,IAAM,CACd,GAAIL,GAAA,MAAAA,EAAO,QAAS,CAClB,MAAMM,EAAeC,EACnBP,EAAM,MACN,4FACD,EACDF,EAAeQ,CAAY,EAC3BE,EAAM,MAAMF,EAAc,CACxB,KAAMG,EAA+BT,EAAM,KAAK,CACxD,CAAO,CACF,CACF,EAAE,CAACA,EAAM,QAASA,EAAM,KAAK,CAAC,EAExB,CACL,GAAGA,EACH,MAAOH,GAAe,IACvB,CACH,EC1BMa,EAAkBC,EAAQC,OAAK,UAAM,OAAO,+BAA2B,gFAAC,CAAC,EAE/E,SAASC,GAAkB,CACnB,MAAEC,cAAaC,wBAAuB,EAAIC,EAAYC,GAASA,CAAK,EACpEC,EAAsBF,EAAqBC,KAAMC,mBAAmB,EACpEC,EAAWH,EAAqBC,KAAME,QAAQ,EAC9C,CACJC,KAAMC,EACNC,YACAC,UACAC,QACAC,WACE/B,EAAuByB,iBAAUO,GAAI,CAAEC,QAAS,CAAC,EAACR,WAAUO,IAAI,EAE9DE,EAAcA,IAAM,CACxBb,EAAuB,EAAK,EAC5BD,EAAY,IAAI,GAGlBT,mBAAU,IAAM,CACVc,WAAUO,IACJD,GACV,EACC,CAACN,CAAQ,CAAC,QAGVU,EACC,MAAMX,EACN,YAAAU,EACA,aACGE,EAAA,IAAAC,EAAA,CACC,SAACD,EAAA,IAAAE,EAAA,CAAW,QAAS,KAAM,0BAAe,GAC5C,EAGF,SAAAF,MAACG,GAAU,eAAgB,CAAEC,GAAI,CAAEC,SAAU,EAAGC,OAAQ,MAAO,GAC7D,SAAAC,OAACN,EAAM,GAAG,EACPT,mBAAcgB,MACdf,GAAW,CAACD,GACXQ,MAACS,EAAiB,cAAcf,EAAO,aAAc,oBAAqB,aAAc,IAAMC,MAE/FP,GAAuB,CAACK,GAAW,CAACD,SAClCZ,EAAgB,UAAUW,EAAiB,UAAWO,CAAY,IAEvE,EACF,CACF,EAEJ","names":["useFindCommerceDetails","commerceId","options","customError","setCustomError","useState","query","useQuery","MANAGEMENT_COMMERCES_KEYS","signal","getCommerceDetails","useEffect","errorMessage","getErrorAPI","toast","getNotificationTypeByErrorCode","GeneralInfoForm","Lodable","lazy","CommerceDetails","setCommerce","setOpenCommerceDetails","useCommerce","state","openCommerceDetails","commerce","data","commerceDetails","isLoading","isError","error","refetch","id","enabled","handleClose","RightPanel","jsx","Stack","Typography","Scrollbar","sx","flexGrow","height","jsxs","RequestLoadingComponent","ErrorRequestPage"],"sources":["../../../../../frontend/src/app/management/commerces/hooks/useFindCommerceDetails.js","../../../../../frontend/src/app/management/commerces/components/CommerceDetails.jsx"],"sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { MANAGEMENT_COMMERCES_KEYS } from '../adapters'\r\nimport { getCommerceDetails } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindCommerceDetails = (commerceId, options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const query = useQuery({\r\n    queryKey: [MANAGEMENT_COMMERCES_KEYS.COMMERCE_DETAILS, commerceId],\r\n    queryFn: ({ signal }) => getCommerceDetails(commerceId),\r\n    refetchOnWindowFocus: false,\r\n    retry: false,\r\n    staleTime: 300000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener los detalles de este comercio. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(query.error)\r\n      })\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { lazy, useEffect } from 'react'\r\n\r\nimport { Stack, Typography } from '@mui/material'\r\n\r\nimport { useFindCommerceDetails } from '../hooks'\r\n\r\nimport { useCommerce } from '@/app/management/commerces/store'\r\nimport { RightPanel } from '@/app/shared/components'\r\nimport { RequestLoadingComponent } from '@/shared/components/loadings'\r\nimport { Lodable } from '@/shared/components/lodables'\r\nimport { ErrorRequestPage } from '@/shared/components/notifications'\r\nimport { Scrollbar } from '@/shared/components/scroll'\r\n\r\nconst GeneralInfoForm = Lodable(lazy(() => import('./details/GeneralInfoForm')))\r\n\r\nfunction CommerceDetails() {\r\n  const { setCommerce, setOpenCommerceDetails } = useCommerce(state => state)\r\n  const openCommerceDetails = useCommerce(state => state.openCommerceDetails)\r\n  const commerce = useCommerce(state => state.commerce)\r\n  const {\r\n    data: commerceDetails,\r\n    isLoading,\r\n    isError,\r\n    error,\r\n    refetch\r\n  } = useFindCommerceDetails(commerce?.id, { enabled: !!commerce?.id })\r\n\r\n  const handleClose = () => {\r\n    setOpenCommerceDetails(false)\r\n    setCommerce(null)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (commerce?.id) {\r\n      refetch()\r\n    }\r\n  }, [commerce])\r\n\r\n  return (\r\n    <RightPanel\r\n      open={openCommerceDetails}\r\n      handleClose={handleClose}\r\n      titleElement={\r\n        <Stack>\r\n          <Typography variant={'h6'}>Editar Comercio</Typography>\r\n        </Stack>\r\n      }\r\n    >\r\n      <Scrollbar containerProps={{ sx: { flexGrow: 0, height: 'auto' } }}>\r\n        <Stack p={3}>\r\n          {isLoading && <RequestLoadingComponent />}\r\n          {isError && !isLoading && (\r\n            <ErrorRequestPage errorMessage={error} titleMessage={'Detalles Comercio'} handleButton={() => refetch()} />\r\n          )}\r\n          {openCommerceDetails && !isError && !isLoading && (\r\n            <GeneralInfoForm commerce={commerceDetails} onSuccess={handleClose} />\r\n          )}\r\n        </Stack>\r\n      </Scrollbar>\r\n    </RightPanel>\r\n  )\r\n}\r\n\r\nexport default CommerceDetails\r\n"],"file":"assets/js/CommerceDetails-2vhXXmhv.js"}