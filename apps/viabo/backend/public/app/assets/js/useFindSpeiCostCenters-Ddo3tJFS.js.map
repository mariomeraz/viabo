{"version":3,"file":"useFindSpeiCostCenters-Ddo3tJFS.js","sources":["../../../../../frontend/src/app/business/viabo-spei/cost-centers/adapters/spei-admin-cost-center-users-adapter.js","../../../../../frontend/src/app/business/viabo-spei/cost-centers/adapters/spei-cost-centers-keys.js","../../../../../frontend/src/app/business/viabo-spei/cost-centers/adapters/spei-cost-centers-list-adapter.js","../../../../../frontend/src/app/business/viabo-spei/cost-centers/services/SpeiCostCentersRepository.js","../../../../../frontend/src/app/business/viabo-spei/cost-centers/hooks/useFindSpeiCostCenters.js"],"sourcesContent":["import { convertCatalogToReactSelect } from '@/shared/utils'\r\n\r\nexport const SpeiAdminCostCenterUsersAdapter = users => {\r\n  const usersAdapted = users?.map(user => ({\r\n    id: user?.id,\r\n    name: user?.name\r\n  }))\r\n\r\n  return convertCatalogToReactSelect(usersAdapted, 'id', 'name')\r\n}\r\n","export const SPEI_COST_CENTERS_KEYS = {\r\n  COST_CENTERS_LIST: 'spei-cost-centers-list',\r\n  USERS_ADMIN_COST_CENTER_LIST: 'spei-admin-cost-center-users-list'\r\n}\r\n\r\nexport const METHODS_NEW_COST_CENTER_USERS = {\r\n  ADMIN_USERS: 'users',\r\n  NEW_ADMIN_USER: 'new-user'\r\n}\r\n","import { convertCatalogToReactSelect } from '@/shared/utils'\r\n\r\nexport const SpeiCostCentersListAdapter = costCenters => {\r\n  const costCentersAdapted =\r\n    costCenters?.map(costCenter => ({\r\n      id: costCenter?.id,\r\n      folio: costCenter?.folio,\r\n      name: costCenter?.name,\r\n      status: costCenter?.active === '1',\r\n      companies: costCenter?.companyTotal,\r\n      create: {\r\n        user: costCenter?.createdByUser,\r\n        date: costCenter?.createDate\r\n      },\r\n      adminUsers: costCenter?.users?.map(user => user?.id) || []\r\n    })) || []\r\n\r\n  return convertCatalogToReactSelect(costCentersAdapted, 'id', 'name')\r\n}\r\n","import { SpeiAdminCostCenterUsersAdapter, SpeiCostCentersListAdapter } from '../adapters'\r\n\r\nimport { axios } from '@/shared/interceptors'\r\n\r\nexport const getSpeiCostCentersList = async () => {\r\n  const { data } = await axios.get('/api/backoffice/cost-centers')\r\n  return SpeiCostCentersListAdapter(data)\r\n}\r\n\r\nexport const newSpeiCostCenter = async costCenter => {\r\n  const { data } = await axios.post('/api/backoffice/cost-center/new', costCenter)\r\n  return data\r\n}\r\n\r\nexport const getViaboSpeiAdminCostCenterUsers = async () => {\r\n  const { data } = await axios.get('/api/security/users/administrators-of-cost-centers')\r\n\r\n  return SpeiAdminCostCenterUsersAdapter(data)\r\n}\r\n\r\nexport const updateSpeiCostCenter = async costCenter => {\r\n  const { data } = await axios.put('/api/backoffice/cost-center/update', costCenter)\r\n  return costCenter\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { SPEI_COST_CENTERS_KEYS } from '../adapters'\r\nimport { getSpeiCostCentersList } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindSpeiCostCenters = (options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const query = useQuery({\r\n    queryKey: [SPEI_COST_CENTERS_KEYS.COST_CENTERS_LIST],\r\n    queryFn: getSpeiCostCentersList,\r\n    refetchOnWindowFocus: false,\r\n    retry: false,\r\n    staleTime: 300000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener la lista de centros de costos. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(query.error)\r\n      })\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n"],"names":["SpeiAdminCostCenterUsersAdapter","users","usersAdapted","user","convertCatalogToReactSelect","SPEI_COST_CENTERS_KEYS","METHODS_NEW_COST_CENTER_USERS","SpeiCostCentersListAdapter","costCenters","costCentersAdapted","costCenter","_a","getSpeiCostCentersList","data","axios","newSpeiCostCenter","getViaboSpeiAdminCostCenterUsers","updateSpeiCostCenter","useFindSpeiCostCenters","options","customError","setCustomError","useState","query","useQuery","useEffect","errorMessage","getErrorAPI","toast","getNotificationTypeByErrorCode"],"mappings":"0JAEO,MAAMA,EAAkCC,GAAS,CACtD,MAAMC,EAAeD,GAAA,YAAAA,EAAO,IAAIE,IAAS,CACvC,GAAIA,GAAA,YAAAA,EAAM,GACV,KAAMA,GAAA,YAAAA,EAAM,IAChB,IAEE,OAAOC,EAA4BF,EAAc,KAAM,MAAM,CAC/D,ECTaG,EAAyB,CACpC,kBAAmB,yBACnB,6BAA8B,mCAChC,EAEaC,EAAgC,CAC3C,YAAa,QACb,eAAgB,UAClB,ECNaC,EAA6BC,GAAe,CACvD,MAAMC,GACJD,GAAA,YAAAA,EAAa,IAAIE,GAAe,OAAA,OAC9B,GAAIA,GAAA,YAAAA,EAAY,GAChB,MAAOA,GAAA,YAAAA,EAAY,MACnB,KAAMA,GAAA,YAAAA,EAAY,KAClB,QAAQA,GAAA,YAAAA,EAAY,UAAW,IAC/B,UAAWA,GAAA,YAAAA,EAAY,aACvB,OAAQ,CACN,KAAMA,GAAA,YAAAA,EAAY,cAClB,KAAMA,GAAA,YAAAA,EAAY,UACnB,EACD,aAAYC,EAAAD,GAAA,YAAAA,EAAY,QAAZ,YAAAC,EAAmB,IAAIR,GAAQA,GAAA,YAAAA,EAAM,MAAO,CAAE,CAC3D,MAAM,CAAE,EAEX,OAAOC,EAA4BK,EAAoB,KAAM,MAAM,CACrE,ECdaG,EAAyB,SAAY,CAChD,KAAM,CAAE,KAAAC,CAAM,EAAG,MAAMC,EAAM,IAAI,8BAA8B,EAC/D,OAAOP,EAA2BM,CAAI,CACxC,EAEaE,EAAoB,MAAML,GAAc,CACnD,KAAM,CAAE,KAAAG,CAAI,EAAK,MAAMC,EAAM,KAAK,kCAAmCJ,CAAU,EAC/E,OAAOG,CACT,EAEaG,EAAmC,SAAY,CAC1D,KAAM,CAAE,KAAAH,CAAM,EAAG,MAAMC,EAAM,IAAI,oDAAoD,EAErF,OAAOd,EAAgCa,CAAI,CAC7C,EAEaI,EAAuB,MAAMP,IACvB,MAAMI,EAAM,IAAI,qCAAsCJ,CAAU,EAC1EA,GCZIQ,EAAyB,CAACC,EAAU,KAAO,CACtD,KAAM,CAACC,EAAaC,CAAc,EAAIC,EAAAA,SAAS,IAAI,EAE7CC,EAAQC,EAAS,CACrB,SAAU,CAACnB,EAAuB,iBAAiB,EACnD,QAASO,EACT,qBAAsB,GACtB,MAAO,GACP,UAAW,IACX,GAAGO,CACP,CAAG,EAEDM,OAAAA,EAAAA,UAAU,IAAM,CACd,GAAIF,GAAA,MAAAA,EAAO,QAAS,CAClB,MAAMG,EAAeC,EACnBJ,EAAM,MACN,4FACD,EACDF,EAAeK,CAAY,EAC3BE,EAAM,MAAMF,EAAc,CACxB,KAAMG,EAA+BN,EAAM,KAAK,CACxD,CAAO,CACF,CACF,EAAE,CAACA,EAAM,QAASA,EAAM,KAAK,CAAC,EAExB,CACL,GAAGA,EACH,MAAOH,GAAe,IACvB,CACH"}