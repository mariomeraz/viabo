{"version":3,"file":"FormCardRegister-C-bPpWOR.js","sources":["../../../../../frontend/src/app/business/viabo-card/register-cards/adapters/assignCardDemoUserAdapter.js","../../../../../frontend/src/app/business/viabo-card/register-cards/hooks/useAssignCardToDemoUser.js","../../../../../frontend/src/app/business/viabo-card/register-cards/components/FormCardRegister.jsx"],"sourcesContent":["import { getCryptInfo } from '@/shared/utils'\r\n\r\nexport const AssignCardDemoUserAdapter = card => {\r\n  const expirationYear = card?.expiration?.slice(-2)\r\n\r\n  const expirationFormatted = card?.expiration?.slice(0, 3) + expirationYear\r\n\r\n  const cardAdapter = {\r\n    expiration: expirationFormatted,\r\n    cvv: card?.cvv\r\n  }\r\n\r\n  return getCryptInfo(cardAdapter)\r\n}\r\n","import { useState } from 'react'\r\n\r\nimport { useMutation } from '@tanstack/react-query'\r\nimport { useSnackbar } from 'notistack'\r\n\r\nimport { assignCardToDemoUser } from '@/app/business/viabo-card/register-cards/services'\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useAssignCardToDemoUser = (options = {}) => {\r\n  const { enqueueSnackbar } = useSnackbar()\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const register = useMutation(assignCardToDemoUser, {\r\n    onSuccess: () => {\r\n      setCustomError(null)\r\n    },\r\n    onError: error => {\r\n      const errorMessage = getErrorAPI(error, 'No se puede asignar la tarjeta. Intente nuevamente o reporte a sistemas')\r\n      setCustomError(errorMessage)\r\n      enqueueSnackbar(errorMessage, {\r\n        variant: getNotificationTypeByErrorCode(error),\r\n        autoHideDuration: 5000\r\n      })\r\n    },\r\n    ...options\r\n  })\r\n\r\n  return {\r\n    ...register,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { AddCard, VpnKey } from '@mui/icons-material'\r\nimport { LoadingButton } from '@mui/lab'\r\nimport { Alert, Box, Button, InputAdornment, Stack, Typography } from '@mui/material'\r\nimport { DatePicker } from '@mui/x-date-pickers'\r\nimport { format, isAfter, isValid, parse } from 'date-fns'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nimport { AssignCardDemoUserAdapter } from '@/app/business/viabo-card/register-cards/adapters'\r\nimport { useAssignCardToDemoUser } from '@/app/business/viabo-card/register-cards/hooks'\r\nimport { CARD_ASSIGN_PROCESS_LIST } from '@/app/business/viabo-card/register-cards/services'\r\nimport { useCardUserAssign } from '@/app/business/viabo-card/register-cards/store'\r\nimport { FormProvider, MaskedInput, RFTextField } from '@/shared/components/form'\r\nimport { axios } from '@/shared/interceptors'\r\n\r\nexport default function FormCardRegister() {\r\n  const setStep = useCardUserAssign(state => state.setStepAssignRegister)\r\n  const token = useCardUserAssign(state => state.token)\r\n  const card = useCardUserAssign(state => state.card)\r\n  const { mutate: assignCard, isLoading: isAssigningCard } = useAssignCardToDemoUser()\r\n\r\n  const CardSchema = Yup.object().shape({\r\n    cvv: Yup.string().min(3, 'Debe contener 3 digitos').required('El CVV es requerido'),\r\n    expiration: Yup.string()\r\n      .required('La fecha de vencimiento es requerida')\r\n      .test('is-future-date', 'La fecha  debe ser mayor que la fecha actual', function (value) {\r\n        const date = parse(`01/${value}`, 'dd/MM/yyyy', new Date())\r\n        const currentDate = new Date()\r\n        const isDateValid = isValid(date)\r\n        return isDateValid && isAfter(date, currentDate)\r\n      })\r\n  })\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      expiration: '',\r\n      cvv: ''\r\n    },\r\n    validationSchema: CardSchema,\r\n    onSubmit: (values, { setSubmitting }) => {\r\n      const data = AssignCardDemoUserAdapter(values)\r\n      axios.defaults.headers.common.Authorization = `Bearer ${token}`\r\n      assignCard(data, {\r\n        onSuccess: () => {\r\n          setSubmitting(false)\r\n          setStep(CARD_ASSIGN_PROCESS_LIST.CARD_ASSIGNED)\r\n        },\r\n        onError: () => {\r\n          setSubmitting(false)\r\n        }\r\n      })\r\n    }\r\n  })\r\n\r\n  const { isSubmitting, values, setFieldValue, errors, handleSubmit, touched, resetForm, setSubmitting } = formik\r\n\r\n  const loading = isSubmitting || isAssigningCard\r\n\r\n  return (\r\n    <Stack\r\n      sx={{\r\n        mb: 3\r\n      }}\r\n    >\r\n      <Stack direction=\"column\" width={1} spacing={1} pb={2}>\r\n        <Typography variant=\"h4\" color=\"textPrimary\" align=\"center\">\r\n          Estamos a un paso de completar su registro\r\n        </Typography>\r\n        <Typography paragraph align=\"center\" variant=\"body1\" color={'text.primary'} whiteSpace=\"pre-line\">\r\n          Ingrese la información faltante de la tarjeta para asociarla a su cuenta.\r\n        </Typography>\r\n      </Stack>\r\n      <FormProvider formik={formik}>\r\n        <Stack px={5}>\r\n          <Box\r\n            sx={{\r\n              pb: 1,\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              gap: 2\r\n            }}\r\n          >\r\n            <Typography variant={'overline'} color={'primary.main'}>\r\n              {card?.cardNumberHidden}\r\n            </Typography>\r\n          </Box>\r\n          <Alert\r\n            sx={{\r\n              textAlign: 'center',\r\n              width: '100%',\r\n              justifyContent: 'center',\r\n              display: 'flex',\r\n              mb: 2\r\n            }}\r\n            severity=\"warning\"\r\n          >\r\n            <Typography variant=\"caption\" fontWeight={'bold'}>\r\n              En caso de no capturar los datos correctos de la tarjeta, la información de la misma podrá ser erronea.\r\n            </Typography>\r\n          </Alert>\r\n\r\n          <Stack direction={{ xs: 'column', lg: 'row' }} spacing={3} display={'flex'}>\r\n            <Stack sx={{ width: { xs: '100%', lg: '40%' } }}>\r\n              <Typography paragraph variant=\"overline\" sx={{ color: 'text.disabled' }}>\r\n                CVV\r\n              </Typography>\r\n              <RFTextField\r\n                name={'cvv'}\r\n                required={true}\r\n                placeholder={'123'}\r\n                size=\"small\"\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <VpnKey />\r\n                    </InputAdornment>\r\n                  ),\r\n                  inputComponent: MaskedInput,\r\n                  inputProps: {\r\n                    mask: '000',\r\n                    onAccept: value => {\r\n                      setFieldValue('cvv', value)\r\n                    },\r\n                    value: values.cvv\r\n                  }\r\n                }}\r\n                disabled={loading}\r\n              />\r\n            </Stack>\r\n            <Stack>\r\n              <Typography paragraph variant=\"overline\" sx={{ color: 'text.disabled' }}>\r\n                Vence\r\n              </Typography>\r\n              <DatePicker\r\n                disabled={loading}\r\n                views={['year', 'month']}\r\n                size=\"small\"\r\n                name={'expiration'}\r\n                value={new Date(values.expiration) ?? null}\r\n                onChange={newValue => {\r\n                  const isDateValid = isValid(newValue)\r\n                  if (isDateValid) {\r\n                    return formik.setFieldValue('expiration', format(newValue, 'MM/yyyy'))\r\n                  } else {\r\n                    return formik.setFieldValue('expiration', '')\r\n                  }\r\n                }}\r\n                slotProps={{\r\n                  textField: {\r\n                    fullWidth: true,\r\n                    size: 'small',\r\n                    error: Boolean(touched.expiration && errors.expiration),\r\n                    required: true,\r\n                    helperText: touched.expiration && errors.expiration ? errors.expiration : ''\r\n                  }\r\n                }}\r\n                disablePast={true}\r\n                format=\"MM/yy\"\r\n              />\r\n            </Stack>\r\n          </Stack>\r\n        </Stack>\r\n      </FormProvider>\r\n      <Stack spacing={3} px={5} py={4}>\r\n        <LoadingButton\r\n          size=\"large\"\r\n          loading={loading}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          fullWidth\r\n          type=\"submit\"\r\n          onClick={handleSubmit}\r\n          disabled={loading}\r\n          startIcon={<AddCard />}\r\n        >\r\n          Asociar\r\n        </LoadingButton>\r\n        <Button\r\n          size=\"large\"\r\n          variant={'outlined'}\r\n          color={'inherit'}\r\n          onClick={() => {\r\n            setStep(CARD_ASSIGN_PROCESS_LIST.CARD_VALIDATION)\r\n          }}\r\n        >\r\n          Cancelar\r\n        </Button>\r\n      </Stack>\r\n    </Stack>\r\n  )\r\n}\r\n"],"names":["AssignCardDemoUserAdapter","card","expirationYear","_a","cardAdapter","_b","getCryptInfo","useAssignCardToDemoUser","options","enqueueSnackbar","useSnackbar","customError","setCustomError","useState","useMutation","assignCardToDemoUser","error","errorMessage","getErrorAPI","getNotificationTypeByErrorCode","FormCardRegister","setStep","useCardUserAssign","state","setStepAssignRegister","token","mutate","assignCard","isLoading","isAssigningCard","CardSchema","Yup","shape","cvv","min","required","expiration","test","value","date","parse","Date","currentDate","isDateValid","isValid","isAfter","formik","useFormik","initialValues","validationSchema","onSubmit","values","setSubmitting","data","axios","defaults","headers","common","Authorization","onSuccess","CARD_ASSIGN_PROCESS_LIST","CARD_ASSIGNED","onError","isSubmitting","setFieldValue","errors","handleSubmit","touched","resetForm","loading","jsxs","Stack","mb","jsx","Typography","FormProvider","Box","pb","display","flexDirection","alignItems","justifyContent","gap","cardNumberHidden","Alert","textAlign","width","xs","lg","color","RFTextField","startAdornment","InputAdornment","VpnKey","inputComponent","MaskedInput","inputProps","mask","onAccept","DatePicker","newValue","format","textField","fullWidth","size","Boolean","helperText","LoadingButton","AddCard","Button","CARD_VALIDATION"],"mappings":"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"}