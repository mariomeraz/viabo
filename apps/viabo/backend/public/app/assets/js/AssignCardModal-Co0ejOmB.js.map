{"version":3,"file":"AssignCardModal-Co0ejOmB.js","sources":["../../../../../frontend/src/app/management/stock-cards/adapters/assignCardsAdapter.js","../../../../../frontend/src/app/management/stock-cards/hooks/useAssignCards.js","../../../../../frontend/src/app/management/stock-cards/components/AssignCardModal.jsx"],"sourcesContent":["export const AssignCardsAdapter = cards => {\r\n  const commerceId = cards?.commerce?.value || ''\r\n  if (cards?.cardId) {\r\n    return {\r\n      cardId: cards?.cardId,\r\n      commerceId\r\n    }\r\n  }\r\n\r\n  return {\r\n    amount: cards?.numberOfCards.toString(),\r\n    paymentProcessorId: cards?.cardType?.value || '',\r\n    commerceId\r\n  }\r\n}\r\n","import { useState } from 'react'\r\n\r\nimport { useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { useSnackbar } from 'notistack'\r\n\r\nimport { MANAGEMENT_STOCK_CARDS_KEYS } from '@/app/management/stock-cards/adapters'\r\nimport { assignCards } from '@/app/management/stock-cards/services'\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useAssignCards = (options = {}) => {\r\n  const { enqueueSnackbar } = useSnackbar()\r\n  const [customError, setCustomError] = useState(null)\r\n  const client = useQueryClient()\r\n\r\n  const register = useMutation(assignCards, {\r\n    onSuccess: () => {\r\n      setCustomError(null)\r\n      client.invalidateQueries([MANAGEMENT_STOCK_CARDS_KEYS.STOCK_CARDS_LIST])\r\n      enqueueSnackbar('Se asignaron las tarjetas al comercio', {\r\n        variant: 'success',\r\n        autoHideDuration: 5000\r\n      })\r\n    },\r\n    onError: error => {\r\n      client.invalidateQueries([MANAGEMENT_STOCK_CARDS_KEYS.STOCK_CARDS_LIST])\r\n      const errorFormatted = getErrorAPI(error, 'No se puede asignar las tarjetas al comercio')\r\n      enqueueSnackbar(errorFormatted, {\r\n        variant: getNotificationTypeByErrorCode(error),\r\n        autoHideDuration: 5000\r\n      })\r\n      setCustomError(errorFormatted)\r\n    },\r\n    ...options\r\n  })\r\n\r\n  return {\r\n    ...register,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { useMemo, useState } from 'react'\r\n\r\nimport { WarningAmberOutlined } from '@mui/icons-material'\r\nimport { Stack, Typography } from '@mui/material'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nimport { MANAGEMENT_STOCK_CARDS_KEYS } from '@/app/management/stock-cards/adapters'\r\nimport { AssignCardsAdapter } from '@/app/management/stock-cards/adapters/assignCardsAdapter'\r\nimport { useAssignCards } from '@/app/management/stock-cards/hooks/useAssignCards'\r\nimport { useAssignCardStore } from '@/app/management/stock-cards/store'\r\nimport { SHARED_CARD_KEYS } from '@/app/shared/adapters'\r\nimport { CardNumber } from '@/app/shared/components/card'\r\nimport { FormProvider, RFSelect, RFTextField } from '@/shared/components/form'\r\nimport { Modal, ModalAlert } from '@/shared/components/modals'\r\nimport { useGetQueryData } from '@/shared/hooks'\r\n\r\nexport default function AssignCardModal() {\r\n  const setOpenAssignCards = useAssignCardStore(state => state.setOpen)\r\n  const setCard = useAssignCardStore(state => state.setCard)\r\n  const card = useAssignCardStore(state => state.card)\r\n  const commerces = useGetQueryData([MANAGEMENT_STOCK_CARDS_KEYS.AFFILIATED_COMMERCES_LIST]) || []\r\n  const cardsList = useGetQueryData([MANAGEMENT_STOCK_CARDS_KEYS.STOCK_CARDS_LIST]) || []\r\n  const cardTypes = useGetQueryData([SHARED_CARD_KEYS.CARD_TYPES_LIST]) || []\r\n  const [openAlertConfirm, setOpenAlertConfirm] = useState(false)\r\n\r\n  const { mutate: assign, isLoading: isAssigning } = useAssignCards()\r\n\r\n  const schema = useMemo(() => {\r\n    const initialSchema = {\r\n      commerce: Yup.object().nullable().required('El comercio es requerido')\r\n    }\r\n    if (card) {\r\n      return {\r\n        ...initialSchema\r\n      }\r\n    }\r\n    return {\r\n      ...initialSchema,\r\n      cardType: Yup.object().nullable().required('El tipo de tarjeta es requerido'),\r\n      numberOfCards: Yup.number()\r\n        .min(1, 'Al menos debe existir una tarjeta')\r\n        .test('maxCards', 'El maximo de tarjetas', function (value) {\r\n          const { cardType } = this.parent\r\n          const filteredCards = cardsList.filter(card => card.cardTypeId === cardType.id)\r\n          const count = filteredCards.length\r\n          if (value > count) {\r\n            return this.createError({\r\n              message: `No se pueden agregar más tarjetas que las disponibles (${count} tarjetas)`\r\n            })\r\n          }\r\n          return true\r\n        })\r\n        .required('El número de tarjetas es requerido')\r\n    }\r\n  }, [card, cardsList])\r\n\r\n  const initial = useMemo(() => {\r\n    if (card) {\r\n      return {\r\n        cardId: card?.id,\r\n        commerce: null\r\n      }\r\n    }\r\n    return {\r\n      numberOfCards: 1,\r\n      cardType: (cardTypes && cardTypes.length > 0 && cardTypes[0]) || null,\r\n      commerce: null\r\n    }\r\n  }, [card])\r\n\r\n  const formik = useFormik({\r\n    initialValues: initial,\r\n    validationSchema: Yup.object().shape(schema),\r\n    onSubmit: (values, { setSubmitting }) => {\r\n      setSubmitting(false)\r\n      setOpenAlertConfirm(true)\r\n    }\r\n  })\r\n\r\n  const { isSubmitting, handleSubmit, values, setSubmitting } = formik\r\n\r\n  const isLoading = isSubmitting || isAssigning\r\n\r\n  const handleAssignCards = cards => {\r\n    const assignData = AssignCardsAdapter(cards)\r\n    assign(assignData, {\r\n      onSuccess: () => {\r\n        setOpenAssignCards(false)\r\n        setCard(null)\r\n        setOpenAlertConfirm(false)\r\n      },\r\n      onError: () => {\r\n        setOpenAlertConfirm(false)\r\n      }\r\n    })\r\n  }\r\n  return (\r\n    <>\r\n      <Modal\r\n        onClose={() => {\r\n          setOpenAssignCards(false)\r\n          setCard(null)\r\n        }}\r\n        onSuccess={handleSubmit}\r\n        isSubmitting={isLoading}\r\n        fullWidth\r\n        scrollType=\"body\"\r\n        title={!card ? 'Asignar Tarjetas' : 'Asignar Tarjeta'}\r\n        textButtonSuccess=\"Asignar\"\r\n        open={!openAlertConfirm}\r\n      >\r\n        <FormProvider formik={formik}>\r\n          <Stack spacing={3} sx={{ py: 3 }}>\r\n            {!card ? (\r\n              <>\r\n                <Stack>\r\n                  <Typography paragraph variant=\"overline\" sx={{ color: 'text.disabled' }}>\r\n                    Tipo de Tarjeta:\r\n                  </Typography>\r\n                  <RFSelect\r\n                    name={'cardType'}\r\n                    textFieldParams={{ placeholder: 'Seleccionar ...', required: true }}\r\n                    options={cardTypes}\r\n                    disabled={isLoading}\r\n                  />\r\n                </Stack>\r\n                <Stack>\r\n                  <Typography paragraph variant=\"overline\" sx={{ color: 'text.disabled' }}>\r\n                    Número de tarjetas:\r\n                  </Typography>\r\n                  <RFTextField\r\n                    name={'numberOfCards'}\r\n                    placeholder={'1'}\r\n                    type={'number'}\r\n                    InputLabelProps={{\r\n                      shrink: true\r\n                    }}\r\n                    inputProps={{ inputMode: 'numeric', min: '1' }}\r\n                    disabled={isLoading}\r\n                  />\r\n                </Stack>\r\n              </>\r\n            ) : (\r\n              <CardNumber card={card} />\r\n            )}\r\n            <Stack>\r\n              <Typography paragraph variant=\"overline\" sx={{ color: 'text.disabled' }}>\r\n                Comercio:\r\n              </Typography>\r\n              <RFSelect\r\n                name={'commerce'}\r\n                textFieldParams={{ placeholder: 'Seleccionar ...', required: true }}\r\n                options={commerces}\r\n                disabled={isLoading}\r\n              />\r\n            </Stack>\r\n          </Stack>\r\n        </FormProvider>\r\n      </Modal>\r\n      {openAlertConfirm && (\r\n        <ModalAlert\r\n          title={!card ? 'Asignar Tarjetas' : 'Asignar Tarjeta'}\r\n          typeAlert=\"warning\"\r\n          textButtonSuccess=\"Asignar\"\r\n          onClose={() => {\r\n            setOpenAlertConfirm(false)\r\n            setSubmitting(false)\r\n          }}\r\n          open={openAlertConfirm}\r\n          isSubmitting={isLoading}\r\n          description={\r\n            <Stack spacing={2}>\r\n              <Typography>\r\n                {!card\r\n                  ? '¿Está seguro de asignar estas tarjetas a este comercio?'\r\n                  : '¿Está seguro de asignar esta tarjeta a este comercio?'}\r\n              </Typography>\r\n              <Stack direction={'row'} alignItems={'center'} spacing={1}>\r\n                <WarningAmberOutlined />\r\n                <Typography variant={'caption'}>Verifique que todos los datos esten correctos</Typography>\r\n              </Stack>\r\n            </Stack>\r\n          }\r\n          onSuccess={() => {\r\n            handleAssignCards(values)\r\n          }}\r\n          fullWidth\r\n          maxWidth=\"xs\"\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n"],"names":["AssignCardsAdapter","cards","commerceId","_a","_b","useAssignCards","options","enqueueSnackbar","useSnackbar","customError","setCustomError","useState","client","useQueryClient","useMutation","assignCards","MANAGEMENT_STOCK_CARDS_KEYS","error","errorFormatted","getErrorAPI","getNotificationTypeByErrorCode","AssignCardModal","setOpenAssignCards","useAssignCardStore","state","setOpen","setCard","card","commerces","useGetQueryData","AFFILIATED_COMMERCES_LIST","cardsList","STOCK_CARDS_LIST","cardTypes","SHARED_CARD_KEYS","CARD_TYPES_LIST","openAlertConfirm","setOpenAlertConfirm","mutate","assign","isLoading","isAssigning","schema","useMemo","initialSchema","commerce","Yup","nullable","required","cardType","numberOfCards","min","test","value","parent","count","filter","cardTypeId","id","length","createError","message","initial","cardId","formik","useFormik","initialValues","validationSchema","shape","onSubmit","values","setSubmitting","isSubmitting","handleSubmit","handleAssignCards","assignData","onSuccess","onError","jsxs","Fragment","jsx","Modal","FormProvider","Stack","py","CardNumber","Typography","color","RFSelect","placeholder","RFTextField","shrink","inputMode","ModalAlert","WarningAmberOutlined"],"mappings":"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"}