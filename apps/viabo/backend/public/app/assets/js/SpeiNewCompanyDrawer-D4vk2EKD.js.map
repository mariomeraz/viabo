{"version":3,"mappings":"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","names":["useFindConcentratorsList","options","customError","setCustomError","useState","query","useQuery","SPEI_COMPANIES_KEYS","signal","getViaboSpeiConcentratorsList","useEffect","errorMessage","getErrorAPI","useFindSpeiAdminCompanyUsers","getViaboSpeiAdminCompanyUsers","useFindSpeiCommissions","getViaboSpeiCommissions","toast","getNotificationTypeByErrorCode","useFindSpeiCompanyDetails","companyId","getViaboSpeiCompanyDetails","SpeiNewCompanyForm","Lodable","lazy","SpeiNewCompanyDrawer","openNewCompany","setOpenNewSpeiCompany","setSpeiCompany","useSpeiCompaniesStore","company","state","data","users","isFetching","isLoadingUsers","isError","isErrorUsers","error","errorUsers","refetch","enabled","costCenters","isLoadingCostCenters","isErrorCostCenters","errorCostCenters","refetchCostCenters","useFindSpeiCostCenters","companyDetails","isErrorDetails","errorDetails","loadingDetails","id","concentrators","isErrorConcentrators","errorConcentrators","isLoading","loadingConcentrators","commissions","loadingCommissions","handleClose","RightPanel","Stack","jsx","Typography","Scrollbar","sx","flexGrow","height","jsxs","RequestLoadingComponent","ErrorRequestPage"],"sources":["../../../../../frontend/src/app/business/viabo-spei/companies/hooks/useFindConcentratorsList.js","../../../../../frontend/src/app/business/viabo-spei/companies/hooks/useFindSpeiAdminCompanyUsers.js","../../../../../frontend/src/app/business/viabo-spei/companies/hooks/useFindSpeiCommissions.js","../../../../../frontend/src/app/business/viabo-spei/companies/hooks/useFindSpeiCompanyDetails.js","../../../../../frontend/src/app/business/viabo-spei/companies/components/new-company/SpeiNewCompanyDrawer.jsx"],"sourcesContent":["import { useEffect, useState } from 'react'\n\nimport { useQuery } from '@tanstack/react-query'\n\nimport { SPEI_COMPANIES_KEYS } from '../adapters'\nimport { getViaboSpeiConcentratorsList } from '../services'\n\nimport { getErrorAPI } from '@/shared/interceptors'\n\nexport const useFindConcentratorsList = (options = {}) => {\n  const [customError, setCustomError] = useState(null)\n\n  const query = useQuery({\n    queryKey: [SPEI_COMPANIES_KEYS.CONCENTRATORS_LIST],\n    queryFn: ({ signal }) => getViaboSpeiConcentratorsList(),\n    refetchOnWindowFocus: false,\n    retry: false,\n    staleTime: 300000,\n    ...options\n  })\n\n  useEffect(() => {\n    if (query?.isError) {\n      const errorMessage = getErrorAPI(\n        query.error,\n        'No se puede obtener la lista de concentradoras. Intente nuevamente o reporte a sistemas'\n      )\n      setCustomError(errorMessage)\n    }\n  }, [query.isError, query.error])\n\n  return {\n    ...query,\n    error: customError || null\n  }\n}\n","import { useEffect, useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\n\r\nimport { SPEI_COMPANIES_KEYS } from '../adapters'\r\nimport { getViaboSpeiAdminCompanyUsers } from '../services'\r\n\r\nimport { getErrorAPI } from '@/shared/interceptors'\r\n\r\nexport const useFindSpeiAdminCompanyUsers = (options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const query = useQuery({\r\n    queryKey: [SPEI_COMPANIES_KEYS.USERS_ADMIN_COMPANY_LIST],\r\n    queryFn: ({ signal }) => getViaboSpeiAdminCompanyUsers(),\r\n    refetchOnWindowFocus: false,\r\n    retry: false,\r\n    staleTime: 300000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener la lista de usuarios. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { useEffect, useState } from 'react'\n\nimport { useQuery } from '@tanstack/react-query'\nimport { toast } from 'react-toastify'\n\nimport { SPEI_COMPANIES_KEYS } from '../adapters'\nimport { getViaboSpeiCommissions } from '../services'\n\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\n\nexport const useFindSpeiCommissions = (options = {}) => {\n  const [customError, setCustomError] = useState(null)\n\n  const query = useQuery({\n    queryKey: [SPEI_COMPANIES_KEYS.COMMISSIONS],\n    queryFn: getViaboSpeiCommissions,\n    refetchOnWindowFocus: false,\n    retry: false,\n    staleTime: 300000,\n    ...options\n  })\n\n  useEffect(() => {\n    if (query?.isError) {\n      const errorMessage = getErrorAPI(\n        query.error,\n        'No se puede obtener la lista de comisiones del servicio. Intente nuevamente o reporte a sistemas'\n      )\n      setCustomError(errorMessage)\n      toast.error(errorMessage, {\n        type: getNotificationTypeByErrorCode(query.error)\n      })\n    }\n  }, [query.isError, query.error])\n\n  return {\n    ...query,\n    error: customError || null\n  }\n}\n","import { useEffect, useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { SPEI_COMPANIES_KEYS } from '../adapters'\r\nimport { getViaboSpeiCompanyDetails } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindSpeiCompanyDetails = (companyId, options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const query = useQuery({\r\n    queryKey: [SPEI_COMPANIES_KEYS.COMPANY_DETAILS, companyId],\r\n    queryFn: () => getViaboSpeiCompanyDetails(companyId),\r\n    refetchOnWindowFocus: false,\r\n    retry: false,\r\n    staleTime: 300000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener la informaci√≥n de la empresa. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(query.error)\r\n      })\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { lazy, useEffect } from 'react'\r\n\r\nimport { Stack, Typography } from '@mui/material'\r\n\r\nimport { useFindSpeiCostCenters } from '../../../cost-centers/hooks'\r\nimport {\r\n  useFindConcentratorsList,\r\n  useFindSpeiAdminCompanyUsers,\r\n  useFindSpeiCommissions,\r\n  useFindSpeiCompanyDetails\r\n} from '../../hooks'\r\nimport { useSpeiCompaniesStore } from '../../store'\r\n\r\nimport { RightPanel } from '@/app/shared/components'\r\nimport { RequestLoadingComponent } from '@/shared/components/loadings'\r\nimport { Lodable } from '@/shared/components/lodables'\r\nimport { ErrorRequestPage } from '@/shared/components/notifications'\r\nimport { Scrollbar } from '@/shared/components/scroll'\r\n\r\nconst SpeiNewCompanyForm = Lodable(lazy(() => import('./SpeiNewCompanyForm')))\r\n\r\nconst SpeiNewCompanyDrawer = () => {\r\n  const { openNewCompany, setOpenNewSpeiCompany, setSpeiCompany } = useSpeiCompaniesStore()\r\n  const company = useSpeiCompaniesStore(state => state.company)\r\n\r\n  const {\r\n    data: users,\r\n    isFetching: isLoadingUsers,\r\n    isError: isErrorUsers,\r\n    error: errorUsers,\r\n    refetch\r\n  } = useFindSpeiAdminCompanyUsers({ enabled: false })\r\n\r\n  const {\r\n    data: costCenters,\r\n    isFetching: isLoadingCostCenters,\r\n    isError: isErrorCostCenters,\r\n    error: errorCostCenters,\r\n    refetch: refetchCostCenters\r\n  } = useFindSpeiCostCenters({ enabled: false })\r\n\r\n  const {\r\n    data: companyDetails,\r\n    isError: isErrorDetails,\r\n    error: errorDetails,\r\n    isFetching: loadingDetails\r\n  } = useFindSpeiCompanyDetails(company?.id, { enabled: !!company?.id })\r\n\r\n  const {\r\n    data: concentrators,\r\n    isError: isErrorConcentrators,\r\n    error: errorConcentrators,\r\n    isLoading: loadingConcentrators\r\n  } = useFindConcentratorsList({ enabled: !!openNewCompany })\r\n\r\n  const { data: commissions, isLoading: loadingCommissions } = useFindSpeiCommissions({ enabled: !!openNewCompany })\r\n\r\n  useEffect(() => {\r\n    if (openNewCompany) {\r\n      refetch()\r\n      refetchCostCenters()\r\n    }\r\n  }, [openNewCompany])\r\n\r\n  const handleClose = () => {\r\n    setOpenNewSpeiCompany(false)\r\n    setSpeiCompany(null)\r\n  }\r\n\r\n  const isError = isErrorUsers || isErrorCostCenters || isErrorDetails || isErrorConcentrators\r\n  const isLoading =\r\n    isLoadingUsers || isLoadingCostCenters || loadingDetails || loadingConcentrators || loadingCommissions\r\n  const error = errorUsers || errorCostCenters || errorDetails || errorConcentrators\r\n\r\n  return (\r\n    <RightPanel\r\n      open={openNewCompany}\r\n      handleClose={handleClose}\r\n      titleElement={\r\n        <Stack>\r\n          <Typography variant={'h6'}>{company ? 'Editar Empresa' : 'Nueva Empresa'}</Typography>\r\n        </Stack>\r\n      }\r\n    >\r\n      <Scrollbar containerProps={{ sx: { flexGrow: 0, height: 'auto' } }}>\r\n        <Stack spacing={3} p={3}>\r\n          {isLoading && <RequestLoadingComponent />}\r\n          {isError && !isLoading && (\r\n            <ErrorRequestPage\r\n              errorMessage={error}\r\n              titleMessage={'Error al obtener informaci√≥n'}\r\n              handleButton={() => refetch()}\r\n            />\r\n          )}\r\n          {!isError && !isLoading && openNewCompany && (\r\n            <SpeiNewCompanyForm\r\n              adminCompanyUsers={users}\r\n              costCenters={costCenters}\r\n              concentrators={concentrators}\r\n              company={companyDetails}\r\n              commissions={commissions}\r\n              onSuccess={handleClose}\r\n            />\r\n          )}\r\n        </Stack>\r\n      </Scrollbar>\r\n    </RightPanel>\r\n  )\r\n}\r\n\r\nexport default SpeiNewCompanyDrawer\r\n"],"file":"assets/js/SpeiNewCompanyDrawer-D4vk2EKD.js"}