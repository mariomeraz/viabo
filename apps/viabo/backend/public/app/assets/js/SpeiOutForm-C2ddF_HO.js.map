{"version":3,"file":"SpeiOutForm-C2ddF_HO.js","sources":["../../../../../frontend/src/app/business/viabo-spei/dashboard/components/spei-out/SpeiOutForm.jsx"],"sourcesContent":["import { useEffect, useRef } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Add, ArrowForwardIos, Delete } from '@mui/icons-material'\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  InputAdornment,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Stack,\r\n  TextField,\r\n  Typography\r\n} from '@mui/material'\r\nimport { stringAvatar } from '@theme/utils'\r\nimport { FieldArray, useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nimport { ButtonViaboSpei, borderColorViaboSpeiStyle } from '@/app/business/viabo-spei/shared/components'\r\nimport { IconButtonAnimate } from '@/shared/components/animate'\r\nimport { FormProvider, MaskedInput, RFSelect, RFTextField } from '@/shared/components/form'\r\nimport { Scrollbar } from '@/shared/components/scroll'\r\n\r\nconst SpeiOutForm = ({ selectedAccount, accounts, setCurrentBalance, insufficient, onSuccess, initialValues }) => {\r\n  const arrayHelpersRef = useRef(null)\r\n\r\n  const crypto = window.crypto || window.msCrypto\r\n\r\n  const array = new Uint32Array(1)\r\n\r\n  const random = crypto.getRandomValues(array)[0]\r\n\r\n  const RegisterSchema = Yup.object().shape({\r\n    transactions: Yup.array().of(\r\n      Yup.object().shape({\r\n        amount: Yup.string()\r\n          .test('maxAmount', 'Monto máximo de transferencia $50,000', function (value) {\r\n            return parseFloat(value?.replace(/,/g, '')) <= 50000\r\n          })\r\n          .required('La cantidad es requerida'),\r\n        account: Yup.object().nullable().required('La cuenta es requerida')\r\n      })\r\n    )\r\n  })\r\n\r\n  const formik = useFormik({\r\n    initialValues: initialValues || {\r\n      transactions: [],\r\n      beneficiary: null,\r\n      amount: '',\r\n      concept: ''\r\n    },\r\n    validateOnChange: false,\r\n    validationSchema: RegisterSchema,\r\n    onSubmit: (values, { setFieldValue, setSubmitting }) => {\r\n      setSubmitting(false)\r\n      setFieldValue('amount', '')\r\n      setFieldValue('beneficiary', null)\r\n      return onSuccess({ ...values, origin: selectedAccount?.account?.number })\r\n    }\r\n  })\r\n\r\n  const { isSubmitting, setFieldValue, values } = formik\r\n\r\n  const loading = isSubmitting\r\n  const isDisabled = !values?.beneficiary || values?.amount === '' || Number(values?.amount) <= 0\r\n\r\n  useEffect(() => {\r\n    const totalAmount = values.transactions?.reduce((accumulator, currentObject) => {\r\n      const amountValue = currentObject.amount.trim() !== '' ? parseFloat(currentObject.amount.replace(/,/g, '')) : 0\r\n\r\n      if (!isNaN(amountValue)) {\r\n        return accumulator + amountValue\r\n      } else {\r\n        return accumulator\r\n      }\r\n    }, 0)\r\n\r\n    const currentBalance = totalAmount.toFixed(2)\r\n\r\n    setCurrentBalance(currentBalance)\r\n  }, [values.transactions])\r\n\r\n  const handleResetForm = () => {\r\n    setFieldValue('amount', '')\r\n    setFieldValue('beneficiary', null)\r\n  }\r\n\r\n  return (\r\n    <Scrollbar containerProps={{ sx: { flexGrow: 0, height: 'auto' } }}>\r\n      <FormProvider formik={formik}>\r\n        <Stack sx={{ p: 3 }}>\r\n          <Stack gap={2}>\r\n            <Stack spacing={0.5}>\r\n              <Typography variant=\"caption\" fontWeight={'bold'}>\r\n                Beneficiario:\r\n              </Typography>\r\n              <RFSelect\r\n                name={'beneficiary'}\r\n                disabled={loading}\r\n                textFieldParams={{\r\n                  placeholder: 'Seleccionar ...',\r\n                  size: 'large'\r\n                }}\r\n                options={accounts || []}\r\n                onChange={(e, value) => {\r\n                  setFieldValue('beneficiary', value)\r\n                }}\r\n                renderOption={(props, option) => {\r\n                  const avatar = stringAvatar(option?.label || '')\r\n\r\n                  return (\r\n                    <Box component=\"li\" {...props}>\r\n                      <Stack direction={'row'} spacing={1} alignItems={'center'}>\r\n                        <Avatar {...avatar} sx={{ ...avatar?.sx, width: 25, height: 25, fontSize: 12 }}></Avatar>\r\n                        <span>{option.label}</span>\r\n                      </Stack>\r\n                    </Box>\r\n                  )\r\n                }}\r\n                renderInput={params => {\r\n                  const avatar = stringAvatar(params?.inputProps?.value || '')\r\n\r\n                  return (\r\n                    <TextField\r\n                      {...params}\r\n                      size=\"large\"\r\n                      placeholder=\"Seleccionar ...\"\r\n                      inputProps={{\r\n                        ...params.inputProps\r\n                      }}\r\n                      InputProps={{\r\n                        ...params.InputProps,\r\n                        startAdornment: (\r\n                          <InputAdornment position=\"start\">\r\n                            <Avatar {...avatar} sx={{ ...avatar?.sx, width: 25, height: 25, fontSize: 12 }}></Avatar>\r\n                          </InputAdornment>\r\n                        ),\r\n                        sx: {\r\n                          borderRadius: theme => Number(1),\r\n                          borderColor: borderColorViaboSpeiStyle\r\n                        }\r\n                      }}\r\n                    />\r\n                  )\r\n                }}\r\n              />\r\n            </Stack>\r\n            <Stack spacing={0.5}>\r\n              <Typography variant=\"caption\" fontWeight={'bold'}>\r\n                Monto:\r\n              </Typography>\r\n              <RFTextField\r\n                size={'large'}\r\n                name={'amount'}\r\n                placeholder={'0.00'}\r\n                disabled={loading}\r\n                autoComplete={'off'}\r\n                InputProps={{\r\n                  startAdornment: <span style={{ marginRight: '5px' }}>$</span>,\r\n                  endAdornment: <span style={{ marginRight: '5px' }}>MXN</span>,\r\n                  inputComponent: MaskedInput,\r\n                  inputProps: {\r\n                    mask: Number,\r\n                    radix: '.',\r\n                    thousandsSeparator: ',',\r\n                    padFractionalZeros: true,\r\n                    min: 0,\r\n                    scale: 2,\r\n                    value: values.amount,\r\n                    onAccept: value => {\r\n                      setFieldValue('amount', value)\r\n                    }\r\n                  },\r\n                  sx: {\r\n                    borderRadius: theme => Number(1),\r\n                    borderColor: borderColorViaboSpeiStyle\r\n                  }\r\n                }}\r\n              />\r\n            </Stack>\r\n\r\n            <Stack direction={'row'} spacing={1}>\r\n              <ButtonViaboSpei\r\n                type=\"button\"\r\n                startIcon={<Add />}\r\n                disabled={loading || isDisabled}\r\n                onClick={() => {\r\n                  arrayHelpersRef.current.push({\r\n                    id: random,\r\n                    account: values?.beneficiary,\r\n                    amount: values?.amount\r\n                  })\r\n\r\n                  handleResetForm()\r\n                }}\r\n                sx={{ flexShrink: 0, color: 'text.primary' }}\r\n              >\r\n                Agregar Transacción\r\n              </ButtonViaboSpei>\r\n            </Stack>\r\n          </Stack>\r\n\r\n          <FieldArray\r\n            name=\"transactions\"\r\n            render={arrayHelpers => {\r\n              arrayHelpersRef.current = arrayHelpers\r\n              return (\r\n                <List sx={{ width: '100%', bgcolor: 'background.paper' }}>\r\n                  {values?.transactions.map((item, index) => (\r\n                    <Stack key={item.id}>\r\n                      <ListItem\r\n                        sx={{ px: 0 }}\r\n                        secondaryAction={\r\n                          <IconButtonAnimate\r\n                            color={'error'}\r\n                            edge=\"end\"\r\n                            aria-label=\"delete\"\r\n                            onClick={() => arrayHelpers.remove(index)}\r\n                          >\r\n                            <Delete />\r\n                          </IconButtonAnimate>\r\n                        }\r\n                      >\r\n                        <ListItemAvatar>\r\n                          <Avatar\r\n                            title={item?.account?.label || ''}\r\n                            {...stringAvatar(item?.account?.label || '')}\r\n                          ></Avatar>\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                          primary={<Typography variant=\"subtitle1\">{item?.account?.clabeHidden}</Typography>}\r\n                          secondary={\r\n                            <Typography variant=\"subtitle1\" fontWeight={'bold'}>\r\n                              {item?.amount}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      </ListItem>\r\n                    </Stack>\r\n                  ))}\r\n                </List>\r\n              )\r\n            }}\r\n          />\r\n\r\n          <RFTextField\r\n            fullWidth\r\n            name={'concept'}\r\n            multiline\r\n            disabled={loading}\r\n            rows={2}\r\n            label={'Concepto'}\r\n            placeholder={'Transferencia ..'}\r\n            InputProps={{\r\n              sx: {\r\n                borderRadius: theme => Number(1),\r\n                borderColor: borderColorViaboSpeiStyle\r\n              }\r\n            }}\r\n          />\r\n\r\n          <Stack sx={{ pt: 3 }}>\r\n            <ButtonViaboSpei\r\n              variant=\"contained\"\r\n              size=\"large\"\r\n              color=\"primary\"\r\n              disabled={!!values?.transactions?.length <= 0}\r\n              fullWidth\r\n              type=\"submit\"\r\n              startIcon={<ArrowForwardIos />}\r\n            >\r\n              Siguiente\r\n            </ButtonViaboSpei>\r\n          </Stack>\r\n        </Stack>\r\n      </FormProvider>\r\n    </Scrollbar>\r\n  )\r\n}\r\n\r\nSpeiOutForm.propTypes = {\r\n  accounts: PropTypes.array,\r\n  initialValues: PropTypes.shape({\r\n    amount: PropTypes.string,\r\n    beneficiary: PropTypes.any,\r\n    concept: PropTypes.string,\r\n    transactions: PropTypes.array\r\n  }),\r\n  insufficient: PropTypes.any,\r\n  onSuccess: PropTypes.func,\r\n  selectedAccount: PropTypes.shape({\r\n    account: PropTypes.shape({\r\n      number: PropTypes.any\r\n    }),\r\n    concentrator: PropTypes.shape({\r\n      number: PropTypes.any\r\n    })\r\n  }),\r\n  setCurrentBalance: PropTypes.func\r\n}\r\n\r\nexport default SpeiOutForm\r\n"],"names":["SpeiOutForm","selectedAccount","accounts","setCurrentBalance","insufficient","onSuccess","initialValues","arrayHelpersRef","useRef","crypto","window","msCrypto","array","Uint32Array","random","getRandomValues","RegisterSchema","Yup","shape","transactions","of","object","amount","test","value","parseFloat","replace","required","account","nullable","formik","useFormik","beneficiary","concept","validateOnChange","validationSchema","onSubmit","values","setFieldValue","setSubmitting","origin","number","isSubmitting","loading","isDisabled","Number","useEffect","currentBalance","reduce","accumulator","currentObject","amountValue","trim","isNaN","toFixed","handleResetForm","jsx","Scrollbar","sx","flexGrow","height","FormProvider","jsxs","Stack","p","Typography","RFSelect","placeholder","size","e","props","option","avatar","stringAvatar","label","Box","Avatar","width","fontSize","params","inputProps","TextField","InputProps","startAdornment","InputAdornment","borderRadius","borderColor","borderColorViaboSpeiStyle","RFTextField","marginRight","endAdornment","inputComponent","MaskedInput","mask","radix","thousandsSeparator","padFractionalZeros","min","scale","onAccept","ButtonViaboSpei","Add","current","push","id","flexShrink","color","FieldArray","arrayHelpers","List","bgcolor","map","item","index","ListItem","px","IconButtonAnimate","remove","Delete","ListItemAvatar","ListItemText","clabeHidden","pt","length","ArrowForwardIos","propTypes","PropTypes","string","any","func","concentrator"],"mappings":"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"}