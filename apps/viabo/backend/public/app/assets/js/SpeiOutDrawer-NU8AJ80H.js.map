{"version":3,"mappings":"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","names":["SpeiOutForm","Lodable","lazy","SpeiOutConcentratorForm","SpeiOutResume","SpeiOutSuccess","SpeiOutDrawer","twoAuth","permissions","useUser","view","setView","useState","speiOutOptions","useMemo","getSpeiOutOptionByPermissions","defaultOption","find","option","default","isCompaniesView","SPEI_OUT_DESTINATION","COMPANIES","id","isThirdAccountsView","THIRD_ACCOUNTS","isConcentratorView","CONCENTRATOR","setOpenSpeiOut","openSpeiOut","selectedAccount","useAdminDashboardSpeiStore","currentBalance","setCurrentBalance","transactionForm","setTransactionForm","balance","number","showResume","setShowResume","transactionData","setTransactionData","successTransaction","setSuccessTransaction","transactionLoading","setTransactionLoading","data","thirdAccountList","isLoading","isLoadingThirdAccountList","isError","isErrorThirdAccounts","error","errorThirdAccounts","refetch","refetchThirdAccounts","useFindSpeiThirdAccountsList","enabled","companies","state","titleTransaction","jsx","Typography","accounts","handleClose","handleSuccessForm","values","commissions","speiOut","internalTransferCompany","fee","totalAmountCommissions","notAdminSTPConcentrators","type","STP_ACCOUNT_TYPES","percentageSpeiOut","amountFee","commissionFee","transactions","length","commissionSpeiOut","reduce","totalCommission","transaction","amount","parseFloat","replace","toFixed","percentageInternalCompany","internalCommissionCompany","currentBalanceWithCommissions","insufficient","concept","origin","internal","total","handleBackResume","handleSuccess","handleChangeView","event","newValue","useEffect","renderContentTransaction","jsxs","Fragment","Stack","py","px","ToggleButtonGroup","map","ToggleButton","name","RightPanel","RequestLoadingComponent","ErrorRequestPage","m","varFade","in","display","flex","overflow","flexDirection","TwoAuthDisabled"],"sources":["../../../../../frontend/src/app/business/viabo-spei/dashboard/components/spei-out/SpeiOutDrawer.jsx"],"sourcesContent":["import { lazy, useEffect, useMemo, useState } from 'react'\r\n\r\nimport { Stack, ToggleButton, ToggleButtonGroup, Typography } from '@mui/material'\r\nimport { m } from 'framer-motion'\r\n\r\nimport { STP_ACCOUNT_TYPES } from '../../constants'\r\nimport { useAdminDashboardSpeiStore } from '../../store'\r\n\r\nimport { SPEI_OUT_DESTINATION, getSpeiOutOptionByPermissions } from '@/app/business/viabo-spei/shared/permissions'\r\nimport { useFindSpeiThirdAccountsList } from '@/app/business/viabo-spei/third-accounts/hooks'\r\nimport { RightPanel } from '@/app/shared/components'\r\nimport { varFade } from '@/shared/components/animate'\r\nimport { RequestLoadingComponent } from '@/shared/components/loadings'\r\nimport { Lodable } from '@/shared/components/lodables'\r\nimport { ErrorRequestPage, TwoAuthDisabled } from '@/shared/components/notifications'\r\nimport { useUser } from '@/shared/hooks'\r\n\r\nconst SpeiOutForm = Lodable(lazy(() => import('./SpeiOutForm')))\r\nconst SpeiOutConcentratorForm = Lodable(lazy(() => import('./SpeiOutConcentratorForm')))\r\nconst SpeiOutResume = Lodable(lazy(() => import('./SpeiOutResume')))\r\nconst SpeiOutSuccess = Lodable(lazy(() => import('./SpeiOutSuccess')))\r\n\r\nconst SpeiOutDrawer = () => {\r\n  const { twoAuth, permissions } = useUser()\r\n  const [view, setView] = useState(null)\r\n\r\n  const speiOutOptions = useMemo(() => getSpeiOutOptionByPermissions(permissions), [permissions])\r\n  const defaultOption = useMemo(() => speiOutOptions?.find(option => option?.default), [speiOutOptions])\r\n\r\n  const isCompaniesView = view === SPEI_OUT_DESTINATION.COMPANIES.id\r\n  const isThirdAccountsView = view === SPEI_OUT_DESTINATION.THIRD_ACCOUNTS.id\r\n  const isConcentratorView = view === SPEI_OUT_DESTINATION.CONCENTRATOR.id\r\n\r\n  const { setOpenSpeiOut, openSpeiOut, selectedAccount } = useAdminDashboardSpeiStore()\r\n\r\n  const [currentBalance, setCurrentBalance] = useState(0)\r\n  const [transactionForm, setTransactionForm] = useState(null)\r\n  const balance = useMemo(() => selectedAccount?.balance?.number, [selectedAccount?.balance])\r\n  const [showResume, setShowResume] = useState(false)\r\n  const [transactionData, setTransactionData] = useState(null)\r\n  const [successTransaction, setSuccessTransaction] = useState(null)\r\n  const [transactionLoading, setTransactionLoading] = useState(false)\r\n\r\n  const {\r\n    data: thirdAccountList,\r\n    isLoading: isLoadingThirdAccountList,\r\n    isError: isErrorThirdAccounts,\r\n    error: errorThirdAccounts,\r\n    refetch: refetchThirdAccounts\r\n  } = useFindSpeiThirdAccountsList({ enabled: !!(openSpeiOut && twoAuth) })\r\n\r\n  const companies = useAdminDashboardSpeiStore(state => state.companies)\r\n\r\n  const titleTransaction = <Typography variant=\"h6\">SPEI Out</Typography>\r\n\r\n  const isLoading = isLoadingThirdAccountList\r\n\r\n  const isError = isErrorThirdAccounts\r\n  const error = errorThirdAccounts\r\n\r\n  const accounts = useMemo(() => {\r\n    if (isCompaniesView) {\r\n      return companies\r\n    }\r\n    if (isThirdAccountsView) {\r\n      return thirdAccountList\r\n    }\r\n    return []\r\n  }, [view, thirdAccountList, companies])\r\n\r\n  const handleClose = () => {\r\n    setOpenSpeiOut(false)\r\n    setCurrentBalance(0)\r\n    setShowResume(false)\r\n    setTransactionData(null)\r\n    setTransactionLoading(false)\r\n    setTransactionForm(null)\r\n    setSuccessTransaction(null)\r\n  }\r\n\r\n  const handleSuccessForm = values => {\r\n    let commissions = {\r\n      speiOut: 0,\r\n      internalTransferCompany: 0,\r\n      fee: 0\r\n    }\r\n    let totalAmountCommissions = 0\r\n\r\n    setTransactionForm(values)\r\n\r\n    const notAdminSTPConcentrators = selectedAccount?.type !== STP_ACCOUNT_TYPES.CONCENTRATOR\r\n\r\n    if (isThirdAccountsView && notAdminSTPConcentrators) {\r\n      const percentageSpeiOut = selectedAccount?.commissions?.speiOut || 0\r\n      const amountFee = selectedAccount?.commissions?.fee || 0\r\n      const commissionFee = values?.transactions?.length * amountFee\r\n      const commissionSpeiOut =\r\n        values?.transactions?.reduce((totalCommission, transaction) => {\r\n          const amount = parseFloat(transaction.amount.replace(/,/g, ''))\r\n          totalCommission += amount * (percentageSpeiOut / 100)\r\n\r\n          return totalCommission\r\n        }, 0) || 0\r\n\r\n      totalAmountCommissions = (commissionFee + commissionSpeiOut).toFixed(2)\r\n\r\n      commissions = {\r\n        speiOut: commissionSpeiOut.toFixed(2),\r\n        internalTransferCompany: 0,\r\n        fee: commissionFee.toFixed(2)\r\n      }\r\n    }\r\n\r\n    if (isCompaniesView && notAdminSTPConcentrators) {\r\n      const percentageInternalCompany = selectedAccount?.commissions?.internalTransferCompany || 0\r\n      const internalCommissionCompany =\r\n        values?.transactions?.reduce((totalCommission, transaction) => {\r\n          const amount = parseFloat(transaction.amount.replace(/,/g, ''))\r\n          totalCommission += amount * (percentageInternalCompany / 100)\r\n          return totalCommission\r\n        }, 0) || 0\r\n\r\n      totalAmountCommissions = internalCommissionCompany.toFixed(2)\r\n\r\n      commissions = {\r\n        speiOut: 0,\r\n        internalTransferCompany: internalCommissionCompany.toFixed(2),\r\n        fee: 0\r\n      }\r\n    }\r\n\r\n    const currentBalanceWithCommissions = (parseFloat(balance) - currentBalance - totalAmountCommissions).toFixed(2)\r\n\r\n    const insufficient = Boolean(currentBalanceWithCommissions < 0)\r\n\r\n    setTransactionData({\r\n      transactions: values?.transactions || [],\r\n      concept: values?.concept,\r\n      balance,\r\n      origin: values?.origin,\r\n      internal: !isThirdAccountsView,\r\n      currentBalance,\r\n      commissions,\r\n      insufficient,\r\n      total: currentBalanceWithCommissions\r\n    })\r\n\r\n    setShowResume(true)\r\n  }\r\n\r\n  const handleBackResume = () => {\r\n    setShowResume(false)\r\n  }\r\n\r\n  const handleSuccess = transaction => {\r\n    setShowResume(false)\r\n    setSuccessTransaction(transaction)\r\n  }\r\n\r\n  const handleChangeView = (event, newValue) => {\r\n    if (newValue) {\r\n      setView(newValue)\r\n      setTransactionForm(null)\r\n    }\r\n  }\r\n\r\n  const refetch = () => {\r\n    refetchThirdAccounts()\r\n  }\r\n\r\n  useEffect(() => {\r\n    setView(defaultOption?.id)\r\n  }, [defaultOption])\r\n\r\n  const renderContentTransaction = (\r\n    <>\r\n      <Stack alignItems={'flex-end'} sx={{ py: 1, px: 3 }}>\r\n        <ToggleButtonGroup\r\n          size={'small'}\r\n          color=\"primary\"\r\n          value={view}\r\n          exclusive\r\n          onChange={handleChangeView}\r\n          aria-label=\"Platform\"\r\n          disabled={transactionLoading}\r\n        >\r\n          {speiOutOptions?.map(option => (\r\n            <ToggleButton key={option?.id} value={option?.id}>\r\n              {option?.name}\r\n            </ToggleButton>\r\n          ))}\r\n        </ToggleButtonGroup>\r\n      </Stack>\r\n      {isConcentratorView ? (\r\n        <SpeiOutConcentratorForm\r\n          onSuccess={handleSuccessForm}\r\n          setCurrentBalance={setCurrentBalance}\r\n          initialValues={transactionForm}\r\n          selectedAccount={selectedAccount}\r\n        />\r\n      ) : (\r\n        <SpeiOutForm\r\n          key={view}\r\n          accounts={accounts || []}\r\n          onSuccess={handleSuccessForm}\r\n          setCurrentBalance={setCurrentBalance}\r\n          initialValues={transactionForm}\r\n          selectedAccount={selectedAccount}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n\r\n  if (!twoAuth) {\r\n    return (\r\n      <RightPanel open={openSpeiOut} handleClose={handleClose} titleElement={titleTransaction}>\r\n        <Stack p={3}>\r\n          <TwoAuthDisabled\r\n            titleMessage={'Google Authenticator'}\r\n            errorMessage={\r\n              'Para realizar esta operación debe activar y configurar el Doble Factor de Autentificación (2FA) desde su perfil.'\r\n            }\r\n          />\r\n        </Stack>\r\n      </RightPanel>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <RightPanel open={openSpeiOut} handleClose={handleClose} titleElement={titleTransaction}>\r\n      {isLoading && <RequestLoadingComponent />}\r\n\r\n      {isError && !isLoading && (\r\n        <ErrorRequestPage errorMessage={error} titleMessage={'Lista de Cuentas'} handleButton={() => refetch()} />\r\n      )}\r\n\r\n      {!isError && !isLoading && openSpeiOut && !showResume && !successTransaction && (\r\n        <m.div\r\n          variants={varFade().in}\r\n          style={{\r\n            display: showResume ? 'none' : 'flex',\r\n            flex: 1,\r\n            overflow: 'hidden',\r\n            flexDirection: 'column'\r\n          }}\r\n        >\r\n          {renderContentTransaction}\r\n        </m.div>\r\n      )}\r\n\r\n      {!isError && !isLoading && openSpeiOut && showResume && !successTransaction && (\r\n        <m.div variants={varFade().in}>\r\n          <SpeiOutResume\r\n            data={transactionData}\r\n            onBack={handleBackResume}\r\n            setTransactionLoading={setTransactionLoading}\r\n            transactionLoading={transactionLoading}\r\n            onSuccess={handleSuccess}\r\n          />\r\n        </m.div>\r\n      )}\r\n\r\n      {!isError && !isLoading && openSpeiOut && !showResume && successTransaction && (\r\n        <m.div variants={varFade().in}>\r\n          <SpeiOutSuccess transactions={successTransaction} onFinish={handleClose} />\r\n        </m.div>\r\n      )}\r\n    </RightPanel>\r\n  )\r\n}\r\n\r\nexport default SpeiOutDrawer\r\n"],"file":"assets/js/SpeiOutDrawer-NU8AJ80H.js"}