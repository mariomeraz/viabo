{"version":3,"mappings":"snBAUO,MAAMA,EAAmB,CAACC,EAAU,KAAO,CAChD,KAAM,CAACC,EAAaC,CAAc,EAAIC,WAAS,IAAI,EAE7CC,EAAQC,EAAS,CACrB,SAAU,CAACC,EAAyB,UAAU,EAC9C,QAASC,EACT,qBAAsB,GACtB,MAAO,GACP,UAAW,IACX,GAAGP,CACP,CAAG,EAEDQ,mBAAU,IAAM,CACd,GAAIJ,GAAA,MAAAA,EAAO,QAAS,CAClB,MAAMK,EAAeC,EACnBN,EAAM,MACN,qFACD,EACDF,EAAeO,CAAY,EAC3BE,EAAM,MAAMF,EAAc,CACxB,KAAMG,EAA+BR,EAAM,KAAK,CACxD,CAAO,CACF,CACF,EAAE,CAACA,EAAM,QAASA,EAAM,KAAK,CAAC,EAExB,CACL,GAAGA,EACH,MAAOH,GAAe,IACvB,CACH,ECzBMY,EAA0BC,EAAQC,OAAK,UAAM,OAAO,uCAA2B,wDAAC,CAAC,EAEjFC,EAA4BA,IAAM,CAChC,MAAEC,iBAAgBC,6BAA4BC,UAASC,uBAAwBC,EAAqB,EAEpG,CAAEC,KAAMC,EAAcC,WAAYC,EAAWC,UAASC,QAAOC,WAAY7B,EAAiB,CAAE8B,QAAS,GAAO,EAE5G,CAAEC,WAAYC,EAAQ,EAE5BvB,YAAU,IAAM,CACVS,GAAkBa,GACZF,GACV,EACC,CAACX,CAAc,CAAC,EAEnB,MAAMe,EAAcA,IAAM,CACxBd,EAA2B,EAAK,EAChCE,EAAoB,IAAI,GAG1B,aACGa,EACC,MAAMhB,EACN,YAAAe,EACA,mBACGE,EACC,UAAAC,EAAA,IAACC,GAAW,QAAS,KAAOjB,WAAU,4BAA8B,2BAA2B,CACjG,GAGF,SAAAgB,MAACE,GAAU,eAAgB,CAAEC,GAAI,CAAEC,SAAU,EAAGC,OAAQ,MAAO,GAC7D,SAACC,EAAA,KAAAP,EAAA,CAAM,QAAS,EAAG,EAAG,EACnBT,mBAAciB,MACdhB,GAAW,CAACD,GACXU,MAACQ,EAAiB,cAAchB,EAAO,aAAc,kBAAmB,aAAc,IAAMC,MAE7F,CAACF,GAAW,CAACD,GAAaR,GAAkBa,GAC3CK,MAACtB,EAAwB,SAAAM,EAAkB,aAAAI,EAA4B,UAAWS,IAEnF,CAACN,GAAW,CAACD,GAAaR,GAAkB,CAACa,GAC5CK,MAACS,EACC,cAAc,uBACd,aACE,kHACD,IAGP,EACF,CACF,EAEJ","names":["useFindSpeiBanks","options","customError","setCustomError","useState","query","useQuery","SPEI_THIRD_ACCOUNTS_KEYS","getSpeiBanks","useEffect","errorMessage","getErrorAPI","toast","getNotificationTypeByErrorCode","NewSpeiThirdAccountForm","Lodable","lazy","NewSpeiThirdAccountDrawer","openNewAccount","setOpenNewSpeiThirdAccount","account","setSpeiThirdAccount","useSpeiThirdAccounts","data","catalogBanks","isFetching","isLoading","isError","error","refetch","enabled","twoAuth","useUser","handleClose","RightPanel","Stack","jsx","Typography","Scrollbar","sx","flexGrow","height","jsxs","RequestLoadingComponent","ErrorRequestPage","TwoAuthDisabled"],"sources":["../../../../../frontend/src/app/business/viabo-spei/third-accounts/hooks/useFindSpeiBanks.js","../../../../../frontend/src/app/business/viabo-spei/third-accounts/components/new-third-account/NewSpeiThirdAccountDrawer.jsx"],"sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { SPEI_THIRD_ACCOUNTS_KEYS } from '../adapters'\r\nimport { getSpeiBanks } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindSpeiBanks = (options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const query = useQuery({\r\n    queryKey: [SPEI_THIRD_ACCOUNTS_KEYS.BANKS_LIST],\r\n    queryFn: getSpeiBanks,\r\n    refetchOnWindowFocus: false,\r\n    retry: false,\r\n    staleTime: 300000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener la lista de los bancos. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(query.error)\r\n      })\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { lazy, useEffect } from 'react'\r\n\r\nimport { Stack, Typography } from '@mui/material'\r\n\r\nimport { useFindSpeiBanks } from '../../hooks'\r\nimport { useSpeiThirdAccounts } from '../../store'\r\n\r\nimport { RightPanel } from '@/app/shared/components'\r\nimport { RequestLoadingComponent } from '@/shared/components/loadings'\r\nimport { Lodable } from '@/shared/components/lodables'\r\nimport { ErrorRequestPage, TwoAuthDisabled } from '@/shared/components/notifications'\r\nimport { Scrollbar } from '@/shared/components/scroll'\r\nimport { useUser } from '@/shared/hooks'\r\n\r\nconst NewSpeiThirdAccountForm = Lodable(lazy(() => import('./NewSpeiThirdAccountForm')))\r\n\r\nconst NewSpeiThirdAccountDrawer = () => {\r\n  const { openNewAccount, setOpenNewSpeiThirdAccount, account, setSpeiThirdAccount } = useSpeiThirdAccounts()\r\n\r\n  const { data: catalogBanks, isFetching: isLoading, isError, error, refetch } = useFindSpeiBanks({ enabled: false })\r\n\r\n  const { twoAuth } = useUser()\r\n\r\n  useEffect(() => {\r\n    if (openNewAccount && twoAuth) {\r\n      refetch()\r\n    }\r\n  }, [openNewAccount])\r\n\r\n  const handleClose = () => {\r\n    setOpenNewSpeiThirdAccount(false)\r\n    setSpeiThirdAccount(null)\r\n  }\r\n\r\n  return (\r\n    <RightPanel\r\n      open={openNewAccount}\r\n      handleClose={handleClose}\r\n      titleElement={\r\n        <Stack>\r\n          <Typography variant={'h6'}>{account ? 'Editar Cuenta de Terceros' : 'Nueva Cuenta de Terceros'}</Typography>\r\n        </Stack>\r\n      }\r\n    >\r\n      <Scrollbar containerProps={{ sx: { flexGrow: 0, height: 'auto' } }}>\r\n        <Stack spacing={3} p={3}>\r\n          {isLoading && <RequestLoadingComponent />}\r\n          {isError && !isLoading && (\r\n            <ErrorRequestPage errorMessage={error} titleMessage={'Lista de Bancos'} handleButton={() => refetch()} />\r\n          )}\r\n          {!isError && !isLoading && openNewAccount && twoAuth && (\r\n            <NewSpeiThirdAccountForm account={account} catalogBanks={catalogBanks} onSuccess={handleClose} />\r\n          )}\r\n          {!isError && !isLoading && openNewAccount && !twoAuth && (\r\n            <TwoAuthDisabled\r\n              titleMessage={'Google Authenticator'}\r\n              errorMessage={\r\n                'Para realizar esta operación debe activar y configurar el Doble Factor de Autentificación (2FA) desde su perfil.'\r\n              }\r\n            />\r\n          )}\r\n        </Stack>\r\n      </Scrollbar>\r\n    </RightPanel>\r\n  )\r\n}\r\n\r\nexport default NewSpeiThirdAccountDrawer\r\n"],"file":"assets/js/NewSpeiThirdAccountDrawer-BL9Jm8OX.js"}