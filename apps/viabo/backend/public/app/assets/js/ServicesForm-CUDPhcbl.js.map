{"version":3,"file":"ServicesForm-CUDPhcbl.js","sources":["../../../../../frontend/src/app/management/commerces/hooks/useUpdateCommerceService.js","../../../../../frontend/src/app/management/commerces/components/details/ServicesForm.jsx"],"sourcesContent":["import { useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { MANAGEMENT_COMMERCES_KEYS } from '../adapters'\r\nimport { updateCommerceService } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\nimport { isFunction } from '@/shared/utils'\r\n\r\nexport const useUpdateCommerceService = (options = {}) => {\r\n  const client = useQueryClient()\r\n  const updateService = useMutation(updateCommerceService, options)\r\n  const commerceService = async (formData, options) => {\r\n    const { onSuccess, onError, mutationOptions } = options\r\n\r\n    try {\r\n      await toast.promise(updateService.mutateAsync(formData, mutationOptions), {\r\n        pending: 'Actualizando Servicio ...',\r\n        success: {\r\n          render({ data }) {\r\n            client.invalidateQueries([MANAGEMENT_COMMERCES_KEYS.COMMERCE_LIST])\r\n            isFunction(onSuccess) && onSuccess(data)\r\n\r\n            return 'Se actualizo el servicio del comercio con éxito'\r\n          }\r\n        }\r\n      })\r\n    } catch (error) {\r\n      const errorFormatted = getErrorAPI(\r\n        error,\r\n        `No se puede realizar esta operación en este momento. Intente nuevamente o reporte a sistemas`\r\n      )\r\n      isFunction(onError) && onError(errorFormatted)\r\n      toast.error(errorFormatted, {\r\n        type: getNotificationTypeByErrorCode(error)\r\n      })\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...updateService,\r\n    mutate: commerceService\r\n  }\r\n}\r\n","import { useMemo, useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Box, Divider, Stack } from '@mui/material'\r\nimport { useFormik } from 'formik'\r\n\r\nimport { useUpdateCommerceService } from '../../hooks'\r\n\r\nimport { getOperationTypeByName } from '@/app/shared/services'\r\nimport { FormProvider, IOSSwitch } from '@/shared/components/form'\r\nimport { CircularLoading } from '@/shared/components/loadings'\r\n\r\nconst servicesCatalog = [\r\n  {\r\n    name: 'VIABO CARD',\r\n    type: '2',\r\n    formikValue: 'viaboCard'\r\n  },\r\n  {\r\n    name: 'VIABO PAY',\r\n    type: '1',\r\n    formikValue: 'viaboPay'\r\n  },\r\n  {\r\n    name: 'NUBE',\r\n    type: '3',\r\n    formikValue: 'cloud'\r\n  }\r\n]\r\n\r\nconst ServicesForm = ({ commerce }) => {\r\n  const { mutate, isLoading } = useUpdateCommerceService()\r\n  const [loadingType, setLoadingType] = useState(null)\r\n  const commerceServices = commerce?.services?.catalog\r\n\r\n  const services = useMemo(\r\n    () =>\r\n      servicesCatalog?.map(service => {\r\n        const serviceLogo = getOperationTypeByName(service?.name)\r\n        return {\r\n          ...service,\r\n          logo: serviceLogo?.component\r\n        }\r\n      }),\r\n    [servicesCatalog]\r\n  )\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      viaboPay: commerceServices?.some(service => service?.type === '1') || false,\r\n      viaboCard: commerceServices?.some(service => service?.type === '2') || false,\r\n      cloud: commerceServices?.some(service => service?.type === '3') || false\r\n    },\r\n    enableReinitialize: true\r\n  })\r\n\r\n  const { values, setFieldValue } = formik\r\n\r\n  const handleChange = service => event => {\r\n    setLoadingType(service?.type)\r\n    const active = !values[service?.formikValue]\r\n    mutate(\r\n      { commerceId: commerce?.id, type: service?.type, active: active ? '1' : '0' },\r\n      {\r\n        onSuccess: () => {\r\n          setFieldValue(service?.formikValue, active)\r\n          setLoadingType(null)\r\n        },\r\n        onError: () => {\r\n          setLoadingType(null)\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  return (\r\n    <FormProvider formik={formik}>\r\n      <Stack spacing={2} p={5} divider={<Divider orientation=\"horizontal\" flexItem sx={{ borderStyle: 'dashed' }} />}>\r\n        {services?.map(service => {\r\n          const Logo = service.logo\r\n          return (\r\n            <Stack justifyContent={'space-between'} flexDirection={'row'} key={service?.name} alignItems={'center'}>\r\n              {Logo && (\r\n                <Box py={1}>\r\n                  <Logo sx={{ width: 35, height: 35 }} />\r\n                </Box>\r\n              )}\r\n              {loadingType === service?.type ? (\r\n                <CircularLoading\r\n                  size={30}\r\n                  containerProps={{\r\n                    display: 'flex',\r\n                    ml: 1\r\n                  }}\r\n                />\r\n              ) : (\r\n                <IOSSwitch\r\n                  disabled={isLoading}\r\n                  size=\"md\"\r\n                  color={!values[service?.formikValue] ? 'error' : 'success'}\r\n                  checked={Boolean(values[service?.formikValue]) || false}\r\n                  inputProps={{ 'aria-label': 'controlled' }}\r\n                  onChange={handleChange(service)}\r\n                />\r\n              )}\r\n            </Stack>\r\n          )\r\n        })}\r\n      </Stack>\r\n    </FormProvider>\r\n  )\r\n}\r\n\r\nServicesForm.propTypes = {\r\n  commerce: PropTypes.shape({\r\n    id: PropTypes.any,\r\n    services: PropTypes.shape({\r\n      catalog: PropTypes.array\r\n    })\r\n  })\r\n}\r\n\r\nexport default ServicesForm\r\n"],"names":["useUpdateCommerceService","options","client","useQueryClient","updateService","useMutation","updateCommerceService","formData","onSuccess","onError","mutationOptions","toast","data","MANAGEMENT_COMMERCES_KEYS","isFunction","error","errorFormatted","getErrorAPI","getNotificationTypeByErrorCode","servicesCatalog","name","type","formikValue","ServicesForm","commerce","mutate","isLoading","loadingType","setLoadingType","useState","commerceServices","services","catalog","useMemo","map","service","serviceLogo","getOperationTypeByName","logo","component","formik","useFormik","initialValues","viaboPay","some","viaboCard","cloud","enableReinitialize","values","setFieldValue","handleChange","event","active","commerceId","id","FormProvider","jsx","Stack","Divider","borderStyle","Logo","Box","width","height","CircularLoading","display","ml","IOSSwitch","Boolean","propTypes","PropTypes","shape","any","array"],"mappings":"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"}